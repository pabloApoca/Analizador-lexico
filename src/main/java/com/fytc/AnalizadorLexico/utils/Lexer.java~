/* The following code was generated by JFlex 1.4.3 on 4/11/21 16:57 */

package com.fytc.AnalizadorLexico.utils;
import static com.fytc.AnalizadorLexico.utils.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/11/21 16:57 from the specification file
 * <tt>src/main/java/com/fytc/AnalizadorLexico/utils/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\41\2\0\1\3\22\0\1\74\1\0\1\33\2\0"+
    "\1\46\1\54\1\0\1\31\1\32\1\44\1\42\1\3\1\43\1\0"+
    "\1\40\12\2\1\0\1\30\1\51\1\52\1\50\2\0\1\4\1\60"+
    "\1\34\1\47\1\35\1\24\1\6\1\70\1\11\2\1\1\5\1\13"+
    "\1\25\1\7\1\63\1\1\1\10\1\61\1\12\1\64\1\65\1\1"+
    "\1\62\1\53\1\57\3\0\1\45\1\1\1\0\1\23\1\67\1\36"+
    "\1\73\1\37\1\27\1\15\1\71\1\20\2\1\1\14\1\22\1\26"+
    "\1\16\1\72\1\1\1\17\1\66\1\21\1\75\4\1\1\76\1\0"+
    "\1\55\u1f9f\0\1\33\u021f\0\1\56\uddc3\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\1\5\12\2"+
    "\1\6\1\7\1\10\1\11\4\2\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\2\1\20\1\21\1\22\2\23"+
    "\1\1\1\24\20\2\1\25\3\2\1\26\11\2\1\24"+
    "\1\2\1\0\12\2\1\4\4\2\1\27\1\30\1\31"+
    "\1\32\1\5\2\33\17\2\1\34\12\2\1\35\1\2"+
    "\1\17\5\2\1\0\3\2\1\36\6\2\1\37\12\2"+
    "\1\40\12\2\1\41\1\2\1\42\1\43\1\44\3\2"+
    "\1\45\1\46\15\2\1\3\1\2\1\47\3\2\1\0"+
    "\1\2\1\0\7\2\1\0\6\2\1\50\2\2\1\51"+
    "\11\2\1\52\1\53\4\2\1\54\15\2\1\0\1\2"+
    "\1\0\12\2\1\55\5\2\1\56\2\2\1\57\22\2"+
    "\1\0\1\2\1\0\2\2\1\60\23\2\1\61\11\2"+
    "\1\0\1\2\1\0\7\2\1\62\2\2\1\63\2\2"+
    "\1\64\1\65\10\2\1\66\1\67\2\2\1\70\1\71"+
    "\1\72\4\2\1\73\12\2\1\74\5\2\1\75\3\2"+
    "\1\76\1\2\1\77\1\2\1\100\5\2\1\101\4\2"+
    "\1\102\4\2\1\103\1\2\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\176"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\77\0\u042f\0\77\0\77\0\u046e\0\u04ad"+
    "\0\u04ec\0\u052b\0\u056a\0\77\0\77\0\77\0\77\0\77"+
    "\0\u05a9\0\u05e8\0\u0627\0\77\0\176\0\77\0\u0666\0\77"+
    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56"+
    "\0\176\0\u0a95\0\u0ad4\0\u0b13\0\176\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\176\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\77\0\77\0\77\0\77\0\77\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\176\0\u15e7"+
    "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\176\0\u185d\0\176\0\u189c\0\u18db\0\u191a\0\u1959"+
    "\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\176\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\176\0\u1c4d\0\u1c8c\0\u1ccb"+
    "\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\176"+
    "\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c"+
    "\0\u20bb\0\u20fa\0\176\0\u2139\0\176\0\176\0\176\0\u2178"+
    "\0\u21b7\0\u21f6\0\176\0\176\0\u2235\0\u2274\0\u22b3\0\u22f2"+
    "\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea"+
    "\0\u2529\0\77\0\u2568\0\176\0\u25a7\0\u25e6\0\u2625\0\u2664"+
    "\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c"+
    "\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54"+
    "\0\176\0\u2a93\0\u2ad2\0\176\0\u2b11\0\u2b50\0\u2b8f\0\u2bce"+
    "\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\176\0\176\0\u2d48"+
    "\0\u2d87\0\u2dc6\0\u2e05\0\176\0\u2e44\0\u2e83\0\u2ec2\0\u2f01"+
    "\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9"+
    "\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1"+
    "\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\176\0\u34aa"+
    "\0\u34e9\0\u3528\0\u3567\0\u35a6\0\176\0\u35e5\0\u3624\0\176"+
    "\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c"+
    "\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14"+
    "\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\176"+
    "\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5"+
    "\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd"+
    "\0\u3ffc\0\u403b\0\u407a\0\176\0\u40b9\0\u40f8\0\u4137\0\u4176"+
    "\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e"+
    "\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527\0\176"+
    "\0\u4566\0\u45a5\0\176\0\u45e4\0\u4623\0\176\0\176\0\u4662"+
    "\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b\0\176"+
    "\0\176\0\u485a\0\u4899\0\77\0\176\0\176\0\u48d8\0\u4917"+
    "\0\u4956\0\u4995\0\176\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0"+
    "\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\176\0\u4c4a\0\u4c89"+
    "\0\u4cc8\0\u4d07\0\u4d46\0\176\0\u4d85\0\u4dc4\0\u4e03\0\176"+
    "\0\u4e42\0\176\0\u4e81\0\176\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d"+
    "\0\u4fbc\0\176\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\176\0\u50f7"+
    "\0\u5136\0\u5175\0\u51b4\0\176\0\u51f3\0\176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\2\3\1\15\2\3"+
    "\1\16\1\17\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\5"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\2\3\1\51\1\3"+
    "\1\52\2\3\1\53\1\3\1\54\1\55\1\56\1\57"+
    "\1\5\2\3\100\0\2\3\1\0\24\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\2\0\1\4\77\0\1\5\35\0\1\5\32\0\1\5"+
    "\3\0\2\3\1\0\1\3\1\60\4\3\1\61\1\3"+
    "\1\62\13\3\4\0\1\63\3\3\7\0\1\3\3\0"+
    "\1\3\3\0\1\64\1\65\1\66\12\3\1\0\2\3"+
    "\1\0\2\3\1\0\3\3\1\67\6\3\1\70\6\3"+
    "\1\71\2\3\4\0\1\3\1\72\1\3\1\73\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\74\23\3\4\0\1\75\1\76\1\3"+
    "\1\77\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\100\3\3\1\101\17\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\3\3\1\102\1\3"+
    "\1\103\6\3\1\104\7\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\70\11\3\4\0\3\3\1\73\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\3\3\1\77\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\14\3\1\104\7\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\10\3\1\62\13\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\5\3\1\105\6\3\1\106\7\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\3\3\1\107\20\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\14\3\1\110\7\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\43\0\1\111\34\0\2\3\1\0\1\112\2\3\1\113"+
    "\6\3\1\114\4\3\1\115\4\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\21\3\1\116\1\117\1\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\2\3\1\120\1\121"+
    "\3\3\1\122\5\3\1\0\2\3\1\0\2\3\1\0"+
    "\12\3\1\123\4\3\1\115\4\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\22\3\1\117\1\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\7\3\1\122\5\3\1\0"+
    "\2\3\40\0\1\124\37\0\2\3\1\0\5\3\1\125"+
    "\6\3\1\126\7\3\4\0\1\3\1\127\1\3\1\130"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\51\0\1\131\1\132\67\0\1\133\6\0\1\134\101\0"+
    "\1\135\22\0\2\3\1\0\5\3\1\136\6\3\1\137"+
    "\7\3\4\0\1\3\1\140\2\3\7\0\1\3\3\0"+
    "\1\3\3\0\5\3\1\141\7\3\1\0\1\142\1\3"+
    "\1\0\2\3\1\0\1\143\3\3\1\144\6\3\1\145"+
    "\3\3\1\146\4\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\14\3\1\137\7\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\1\147\1\3\1\0\2\3"+
    "\1\0\1\150\16\3\1\151\4\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\17\3\1\151\4\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\13\3\1\145\3\3\1\146\4\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\14\3\1\126\7\3\4\0"+
    "\3\3\1\130\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\2\3\1\152\21\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\153\23\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\11\3\1\154\12\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\155\20\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\156\23\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\2\3\1\157\12\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\1\3\1\160\2\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\2\3\1\161\16\3\1\162\2\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\11\3\1\163\12\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\4\0\1\3"+
    "\1\164\2\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\4\0\3\3"+
    "\1\165\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\5\3\1\166\16\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\167\23\3\4\0\4\3"+
    "\7\0\1\170\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\17\3\1\171\4\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\21\3\1\172\2\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\5\3\1\173\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\4\3\7\0\1\174"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\1\3\1\175\2\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\3\3\1\176\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\21\3\1\177\2\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\22\3\1\200\1\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\22\3\1\201\1\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\2\0\1\202\75\0"+
    "\2\3\1\0\4\3\1\203\17\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\7\3\1\204\11\3\1\205\2\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\2\3\1\206"+
    "\12\3\1\0\2\3\1\0\2\3\1\0\16\3\1\207"+
    "\3\3\1\210\1\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\13\3\1\211\10\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\6\3\1\212\15\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\15\3\1\213\6\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\4\0\1\214\3\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\4\3"+
    "\1\215\10\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\2\3\1\216\1\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\16\3"+
    "\1\207\3\3\1\217\1\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\41\124\1\0"+
    "\35\124\1\0\2\3\1\0\7\3\1\220\14\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\16\3\1\221\5\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\20\3\1\222\3\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\2\3\1\223"+
    "\12\3\1\0\2\3\1\0\2\3\1\0\23\3\1\224"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\7\3"+
    "\1\225\5\3\1\0\2\3\1\0\2\3\1\0\21\3"+
    "\1\226\2\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\22\3"+
    "\1\227\1\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\21\3"+
    "\1\230\2\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\1\3"+
    "\1\231\13\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\10\3"+
    "\1\232\4\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\233\17\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\234\20\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\12\3"+
    "\1\235\11\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\13\3"+
    "\1\236\10\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\10\3"+
    "\1\237\4\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\1\240\3\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\2\3\1\241\1\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\3\3\1\242"+
    "\20\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\21\3\1\243"+
    "\2\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\12\3\1\244"+
    "\11\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\2\3\1\245"+
    "\12\3\1\0\2\3\1\0\2\3\1\0\4\3\1\246"+
    "\17\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\21\3\1\247"+
    "\2\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\5\3\1\250"+
    "\16\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\2\3\1\251"+
    "\21\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\14\3\1\252"+
    "\7\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\4\3\1\253"+
    "\17\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\13\3\1\253"+
    "\10\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\1\75\14\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\1\254\22\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\3\3\1\255\20\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\10\3\1\254\13\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\21\3\1\256\2\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\21\3\1\257\2\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\22\3\1\260\1\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\261\6\3\1\262"+
    "\14\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\263\1\3\1\264\10\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\265\6\3\1\266\14\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\2\3\1\267\1\3"+
    "\1\270\10\3\1\0\2\3\1\0\2\3\1\0\16\3"+
    "\1\266\1\265\4\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\7\3\1\271\3\3\1\270\1\3\1\0"+
    "\2\3\2\0\1\202\27\0\1\272\45\0\2\3\1\0"+
    "\1\273\23\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\274\20\3\4\0\1\3\1\275\2\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\1\276\3\3\7\0\1\3\3\0"+
    "\1\3\3\0\6\3\1\277\6\3\1\300\2\3\1\0"+
    "\2\3\1\0\12\3\1\274\11\3\4\0\3\3\1\301"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\302\2\3\1\0\2\3"+
    "\1\0\17\3\1\303\4\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\304\20\3\4\0\1\3\1\305\2\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\12\3\1\306\11\3\4\0\3\3"+
    "\1\307\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\4\3\1\310\17\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\13\3\1\311\10\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\312\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\1\3\1\313\2\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\3\3\1\314\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\5\3\1\315\16\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\4\3\7\0\1\316\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\14\3"+
    "\1\317\7\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\14\3"+
    "\1\320\1\0\2\3\1\0\2\3\1\0\3\3\1\321"+
    "\20\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\12\3\1\321"+
    "\11\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\4\3\1\322"+
    "\10\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\4\3\1\323"+
    "\10\3\1\0\2\3\1\0\2\3\1\0\1\324\23\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\4\0\1\325"+
    "\3\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\2\3\1\326"+
    "\1\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\17\3\1\324\4\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\13\3\1\323\1\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\1\3\1\327"+
    "\2\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\3\3\1\330"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\4\3\1\331\17\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\13\3\1\332\10\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\1\333\3\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\5\3\1\334\16\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\2\3\1\335\1\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\21\3\1\336\2\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\1\337\3\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\6\3\1\340\15\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\15\3\1\341\6\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\1\342\22\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\5\3\1\343\16\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\5\3\1\344\16\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\5\3\1\345\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\346\3\3\1\347\17\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\10\3\1\350\13\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\14\3\1\351\7\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\14\3\1\344\7\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\1\352\1\3\1\0\2\3\1\0\13\3\1\353\3\3"+
    "\1\354\4\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\14\3"+
    "\1\344\7\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\1\355\1\3\1\0\2\3\1\0"+
    "\24\3\4\0\1\356\3\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\21\3"+
    "\1\357\2\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\1\360"+
    "\23\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\1\3\1\361\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\63\0\1\362\14\0\2\3\1\0"+
    "\22\3\1\363\1\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\63\0\1\364\6\0"+
    "\1\364\5\0\2\3\1\0\24\3\4\0\2\3\1\365"+
    "\1\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\21\3\1\366\2\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\4\3\1\367\17\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\22\3\1\370\1\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\13\3\1\371\10\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\5\3\1\372\16\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\14\3\1\373\7\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\72\0\1\364\5\0\2\3\1\0\21\3\1\374"+
    "\2\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\22\3\1\375"+
    "\1\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\21\3\1\376"+
    "\2\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\1\3\1\377\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\22\3\1\u0100"+
    "\1\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\3\3\1\377\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\4\3\1\u0101\17\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\13\3\1\u0102\10\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\4\0\1\3"+
    "\1\u0103\2\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\4\0\3\3"+
    "\1\u0104\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\4\3\1\u0105\17\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\13\3\1\u0105\10\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\5\3\1\u0106\16\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\14\3\1\u0107\7\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\u0108\20\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\6\3\1\u0109\15\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\12\3\1\u0108\11\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\4\3\1\u010a\17\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\13\3\1\u010b\10\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\2\3\1\u010c\21\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\1\3\1\u010d"+
    "\2\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\1\3\1\u010e\13\3\1\0"+
    "\2\3\1\0\2\3\1\0\4\3\1\u010f\17\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\u0110\20\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\11\3\1\u0111\12\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\3\3\1\u0112"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\10\3\1\u0113\4\3\1\0\2\3"+
    "\1\0\2\3\1\0\12\3\1\u0114\11\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\13\3\1\u0115\10\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\10\3\1\u0116\4\3\1\0\2\3"+
    "\1\0\2\3\1\0\6\3\1\u0117\15\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\1\u0118\14\3\1\0\2\3\1\0"+
    "\2\3\1\0\6\3\1\u0119\15\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\4\3\1\u011a\17\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\4\0"+
    "\1\u011b\73\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\1\3\1\u011c"+
    "\23\0\1\u011d\54\0\2\3\1\0\15\3\1\u011e\6\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\4\0\1\u011f"+
    "\3\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\u0120\20\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\2\3\1\u0121"+
    "\1\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\12\3\1\u0120\11\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\1\3\1\u0122\13\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\10\3\1\u0123\4\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\u0124\12\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\7\3\1\u0125\5\3\1\0"+
    "\2\3\1\0\2\3\1\0\5\3\1\u0126\16\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\14\3\1\u0127\7\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\u0128\20\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\12\3\1\u0129\11\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\u012a\12\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\7\3\1\u012b\5\3\1\0"+
    "\2\3\1\0\2\3\1\0\6\3\1\u012c\15\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\15\3\1\u012d\6\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\5\3\1\u012e\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\u012f\23\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\17\3\1\u0130\4\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\3\3\1\u0131\20\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\21\3\1\u0132\2\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\4\3\1\u0133\10\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\u0134\23\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\1\u0135\3\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\u0136\11\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\22\3\1\u0137\1\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\4\3\1\u0138\10\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\2\3\1\u0139\1\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\17\3\1\u0134\4\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\13\3\1\u0138\1\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\1\3\1\u013a\2\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\u013b\23\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\4\0\1\3\1\u013c\2\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\6\3\1\u013d\15\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\61\0\1\u013e\16\0"+
    "\2\3\1\0\17\3\1\u013f\4\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\66\0"+
    "\1\u0140\11\0\2\3\1\0\24\3\4\0\3\3\1\u0141"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\1\3\1\u0142\2\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\4\0\3\3\1\u0143\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\5\3\1\u0144\16\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\14\3\1\u0145\7\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\5\3\1\u0146\16\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\14\3\1\u0147\7\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\4\3\1\u0148\17\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\13\3\1\u0148\10\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\1\u0149\3\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\2\3\1\u014a\1\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\u014b\20\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\u014b\11\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\7\3\1\u014c\14\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\16\3\1\u014d\5\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\4\3\7\0\1\u014e\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\u014f\12\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\7\3"+
    "\1\u014f\5\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\u0150\17\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\6\3"+
    "\1\u0151\15\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\u0152\17\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\1\3\1\u0153\2\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\13\3"+
    "\1\u0154\10\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\15\3"+
    "\1\u0155\6\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\13\3"+
    "\1\u0156\10\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\3\3\1\u0157\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\4\3\1\u0158"+
    "\17\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\4\3\1\u0159"+
    "\17\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\21\3\1\u015a"+
    "\2\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\5\3\1\u015b"+
    "\16\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\7\0\1\u015c\70\0\2\3\1\0"+
    "\13\3\1\u0159\10\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\16\0\1\u015c\61\0"+
    "\2\3\1\0\13\3\1\u0158\10\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\2\3\1\u015d\12\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\7\3\1\u015d\5\3\1\0\2\3\1\0"+
    "\2\3\1\0\4\3\1\u015e\17\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\13\3\1\u015e\10\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\3\3\1\u015f\20\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\12\3\1\u0160\11\3\4\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\1\3\1\u0161\2\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\4\0\3\3\1\u0162\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\u0163\20\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\u0163\11\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\5\3\1\u0164\16\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\4\3\1\u0165\17\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\u0166\20\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\u0167\12\3\1\0\2\3\1\0\2\3"+
    "\1\0\14\3\1\u0168\7\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\13\3\1\u0169\10\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\u016a\11\3\4\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\7\3\1\u016b\5\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\u016c\23\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\4\3\1\u016d\17\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\21\3\1\u016e\2\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\22\3\1\u016e\1\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\u016f\12\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\7\3\1\u0170\5\3\1\0\2\3\1\0\2\3\1\0"+
    "\6\3\1\u0171\15\3\4\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\u0172\23\3\4\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\4\0\1\u0173\3\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\3\3\1\u0174"+
    "\20\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\15\3\1\u0175"+
    "\6\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\17\3\1\u0176"+
    "\4\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\2\3\1\u0177\1\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\12\3\1\u0174"+
    "\11\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\4\3\1\u0178"+
    "\17\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\1\u0179\23\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\3\3\1\u017a\20\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\12\3\1\u017a\11\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\7\3\1\u017b\14\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\2\3\1\u017c\12\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\4\0\1\3"+
    "\1\u017d\2\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\16\3\1\u017e\5\3"+
    "\4\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\4\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\7\3\1\u017c\5\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\4\0\3\3"+
    "\1\u017f\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\6\3\1\u0180\12\3\1\u0181"+
    "\2\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\3\3\1\u0182"+
    "\20\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\2\3\1\u0183"+
    "\12\3\1\0\2\3\1\0\2\3\1\0\12\3\1\u0182"+
    "\11\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\7\3\1\u0184"+
    "\5\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\1\3\1\u0185\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\5\3\1\u0186"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\3\3\1\u0187"+
    "\20\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\12\3\1\u0187"+
    "\11\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\3\3\1\u0188"+
    "\11\3\1\0\2\3\1\0\2\3\1\0\7\3\1\u0189"+
    "\14\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\6\3\1\u018a"+
    "\15\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\4\0"+
    "\1\3\1\u018b\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\3\3\1\u018c"+
    "\20\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\4\3\1\u018d"+
    "\17\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\3\3\1\u018e"+
    "\20\3\4\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21042];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\1\11\1\1\2\11\5\1\5\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\40\1\1\0"+
    "\17\1\5\11\44\1\1\0\67\1\1\11\5\1\1\0"+
    "\1\1\1\0\7\1\1\0\47\1\1\0\1\1\1\0"+
    "\46\1\1\0\1\1\1\0\40\1\1\0\1\1\1\0"+
    "\33\1\1\11\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 69: break;
        case 28: 
          { return ValorAbsoluto;
          }
        case 70: break;
        case 22: 
          { return RaizCuadrada;
          }
        case 71: break;
        case 24: 
          { return MayorOIgual;
          }
        case 72: break;
        case 64: 
          { return FinRepeticionMientras;
          }
        case 73: break;
        case 51: 
          { return InicioProceso;
          }
        case 74: break;
        case 17: 
          { return Menor;
          }
        case 75: break;
        case 25: 
          { return Asignacion;
          }
        case 76: break;
        case 55: 
          { return ComenzarSubProceso;
          }
        case 77: break;
        case 20: 
          { return Negacion;
          }
        case 78: break;
        case 68: 
          { return ConvertirVariableANumero;
          }
        case 79: break;
        case 57: 
          { return  EntoncesIntrucciones;
          }
        case 80: break;
        case 53: 
          { return InicioRepeticionMientras;
          }
        case 81: break;
        case 48: 
          { return TipoDeDatoEntero;
          }
        case 82: break;
        case 19: 
          { return Conjuncion;
          }
        case 83: break;
        case 21: 
          { return LogaritmoNatural;
          }
        case 84: break;
        case 41: 
          { return InicioPara;
          }
        case 85: break;
        case 35: 
          { return EnteroAleatorio;
          }
        case 86: break;
        case 31: 
          { return FuncionExponencial;
          }
        case 87: break;
        case 32: 
          { return Seno;
          }
        case 88: break;
        case 67: 
          { return ConvertirVariableATexto;
          }
        case 89: break;
        case 45: 
          { return MarcarDesde;
          }
        case 90: break;
        case 61: 
          { return FinProceso;
          }
        case 91: break;
        case 29: 
          { return Tangente;
          }
        case 92: break;
        case 15: 
          { return Modulo;
          }
        case 93: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 94: break;
        case 56: 
          { return MarcarConPaso;
          }
        case 95: break;
        case 63: 
          { return InicioSubProceso;
          }
        case 96: break;
        case 30: 
          { return Coseno;
          }
        case 97: break;
        case 39: 
          { return DefinirComoTipo;
          }
        case 98: break;
        case 58: 
          { return SalidaEscritura;
          }
        case 99: break;
        case 7: 
          { return AbreParentesis;
          }
        case 100: break;
        case 62: 
          { return ConcatenarCadenas;
          }
        case 101: break;
        case 44: 
          { return FinCondicionalSi;
          }
        case 102: break;
        case 23: 
          { return Distinto;
          }
        case 103: break;
        case 26: 
          { return MenorOIgual;
          }
        case 104: break;
        case 65: 
          { return FinAlgoritmo;
          }
        case 105: break;
        case 11: 
          { return Suma;
          }
        case 106: break;
        case 9: 
          { return Comilla;
          }
        case 107: break;
        case 36: 
          { return Arcoseno;
          }
        case 108: break;
        case 52: 
          { return Longitud;
          }
        case 109: break;
        case 54: 
          { return TipoDeDatoCaracter;
          }
        case 110: break;
        case 50: 
          { return DefinirVariable;
          }
        case 111: break;
        case 42: 
          { return EnteroMasCercano;
          }
        case 112: break;
        case 47: 
          { return TipoDeDatoLogico;
          }
        case 113: break;
        case 37: 
          { return EntradaLectura;
          }
        case 114: break;
        case 12: 
          { return Resta;
          }
        case 115: break;
        case 16: 
          { return Mayor;
          }
        case 116: break;
        case 46: 
          { return HacerIntrucciones;
          }
        case 117: break;
        case 5: 
          { return Disyuncion;
          }
        case 118: break;
        case 60: 
          { return DefinirDimension;
          }
        case 119: break;
        case 27: 
          { return InicioCondicionalSi;
          }
        case 120: break;
        case 6: 
          { return PuntoYComa;
          }
        case 121: break;
        case 66: 
          { return  FinSubProceso;
          }
        case 122: break;
        case 1: 
          { return ERROR;
          }
        case 123: break;
        case 14: 
          { return Potenciacion;
          }
        case 124: break;
        case 13: 
          { return Multiplicacion;
          }
        case 125: break;
        case 43: 
          { return ParteEntera;
          }
        case 126: break;
        case 4: 
          { /*Ignore*/
          }
        case 127: break;
        case 8: 
          { return CierreParentesis;
          }
        case 128: break;
        case 34: 
          { return Arcocoseno;
          }
        case 129: break;
        case 49: 
          { return FinPara;
          }
        case 130: break;
        case 18: 
          { return Igual;
          }
        case 131: break;
        case 40: 
          { return CondicionalSi;
          }
        case 132: break;
        case 38: 
          { return TipoDeDatoReal;
          }
        case 133: break;
        case 10: 
          { return Division;
          }
        case 134: break;
        case 59: 
          { return InicioAlgoritmo;
          }
        case 135: break;
        case 33: 
          { return Arcotangente;
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
