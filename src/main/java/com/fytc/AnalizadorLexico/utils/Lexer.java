/* The following code was generated by JFlex 1.4.3 on 4/11/21 16:14 */

package com.fytc.AnalizadorLexico.utils;
import static com.fytc.AnalizadorLexico.utils.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/11/21 16:14 from the specification file
 * <tt>src/main/java/com/fytc/AnalizadorLexico/utils/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\36\2\0\1\3\22\0\1\71\4\0\1\43\1\51"+
    "\1\0\1\74\1\75\1\41\1\37\1\3\1\40\1\0\1\35\12\2"+
    "\1\0\1\30\1\46\1\47\1\45\2\0\1\4\1\55\1\31\1\44"+
    "\1\32\1\24\1\6\1\65\1\11\2\1\1\5\1\13\1\25\1\7"+
    "\1\60\1\1\1\10\1\56\1\12\1\61\1\62\1\1\1\57\1\50"+
    "\1\54\3\0\1\42\1\1\1\0\1\23\1\64\1\33\1\70\1\34"+
    "\1\27\1\15\1\66\1\20\2\1\1\14\1\22\1\26\1\16\1\67"+
    "\1\1\1\17\1\63\1\21\1\72\4\1\1\73\1\0\1\52\u21bf\0"+
    "\1\53\uddc3\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\1\5\12\2"+
    "\1\6\4\2\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\2\1\15\1\16\1\17\2\20\1\1\1\21\7\2"+
    "\1\1\11\2\1\22\3\2\1\23\11\2\1\21\13\2"+
    "\1\4\4\2\1\24\1\25\1\26\1\27\1\5\2\30"+
    "\12\2\1\0\5\2\1\31\12\2\1\32\1\2\1\14"+
    "\10\2\1\33\6\2\1\34\12\2\1\35\11\2\1\0"+
    "\1\2\1\36\1\2\1\37\1\40\1\41\3\2\1\42"+
    "\1\43\16\2\1\44\3\2\1\0\1\2\1\0\7\2"+
    "\1\0\6\2\1\45\2\2\1\46\4\2\1\3\5\2"+
    "\1\47\1\50\4\2\1\51\15\2\1\0\1\2\1\0"+
    "\12\2\1\52\5\2\1\53\2\2\1\54\22\2\1\0"+
    "\1\2\1\0\2\2\1\55\23\2\1\56\11\2\1\0"+
    "\1\2\1\0\7\2\1\57\2\2\1\60\2\2\1\61"+
    "\1\62\10\2\1\63\1\64\2\2\1\65\1\66\1\67"+
    "\4\2\1\70\12\2\1\71\5\2\1\72\3\2\1\73"+
    "\1\2\1\74\1\2\1\75\5\2\1\76\4\2\1\77"+
    "\4\2\1\100\1\2\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\76\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\76\0\76\0\76\0\76\0\76\0\u0554\0\u0592\0\u05d0"+
    "\0\76\0\174\0\76\0\u060e\0\76\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8"+
    "\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\174\0\u0a6a"+
    "\0\u0aa8\0\u0ae6\0\174\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\174\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\76\0\76\0\76"+
    "\0\76\0\76\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\174\0\u158e\0\u15cc\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\174"+
    "\0\u17fa\0\174\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\174\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20"+
    "\0\u1b5e\0\174\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\174\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\174\0\u20b2\0\174\0\174\0\174\0\u20f0\0\u212e\0\u216c"+
    "\0\174\0\174\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0"+
    "\0\174\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682"+
    "\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872"+
    "\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\174\0\u29e6\0\u2a24"+
    "\0\174\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\76\0\u2b5a\0\u2b98"+
    "\0\u2bd6\0\u2c14\0\u2c52\0\174\0\174\0\u2c90\0\u2cce\0\u2d0c"+
    "\0\u2d4a\0\174\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe"+
    "\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae"+
    "\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e"+
    "\0\u32dc\0\u331a\0\u3358\0\u3396\0\174\0\u33d4\0\u3412\0\u3450"+
    "\0\u348e\0\u34cc\0\174\0\u350a\0\u3548\0\174\0\u3586\0\u35c4"+
    "\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4"+
    "\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4"+
    "\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\174\0\u3b18\0\u3b56"+
    "\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46"+
    "\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36"+
    "\0\u3f74\0\174\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8"+
    "\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u429a\0\u42d8"+
    "\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\174\0\u444c\0\u448a"+
    "\0\174\0\u44c8\0\u4506\0\174\0\174\0\u4544\0\u4582\0\u45c0"+
    "\0\u45fe\0\u463c\0\u467a\0\u46b8\0\u46f6\0\174\0\174\0\u4734"+
    "\0\u4772\0\76\0\174\0\174\0\u47b0\0\u47ee\0\u482c\0\u486a"+
    "\0\174\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c"+
    "\0\u4a5a\0\u4a98\0\u4ad6\0\174\0\u4b14\0\u4b52\0\u4b90\0\u4bce"+
    "\0\u4c0c\0\174\0\u4c4a\0\u4c88\0\u4cc6\0\174\0\u4d04\0\174"+
    "\0\u4d42\0\174\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78\0\174"+
    "\0\u4eb6\0\u4ef4\0\u4f32\0\u4f70\0\174\0\u4fae\0\u4fec\0\u502a"+
    "\0\u5068\0\174\0\u50a6\0\174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\2\3\1\15\2\3"+
    "\1\16\1\17\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\5\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\2\3\1\46\1\3\1\47\2\3\1\50"+
    "\1\3\1\51\1\52\1\53\1\54\1\5\2\3\1\55"+
    "\1\2\77\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\4\0"+
    "\1\4\76\0\1\5\32\0\1\5\32\0\1\5\5\0"+
    "\2\3\1\0\1\3\1\56\4\3\1\57\1\3\1\60"+
    "\13\3\1\0\1\61\3\3\7\0\1\3\3\0\1\3"+
    "\3\0\1\62\1\63\1\64\12\3\1\0\2\3\3\0"+
    "\2\3\1\0\3\3\1\65\6\3\1\66\6\3\1\67"+
    "\2\3\1\0\1\3\1\70\1\3\1\71\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\1\72\23\3\1\0\1\73\1\74\1\3\1\75"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\1\76\3\3\1\77\17\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\3\3\1\100\1\3\1\101"+
    "\6\3\1\102\7\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\12\3\1\66\11\3\1\0\3\3\1\71\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\24\3\1\0\3\3\1\75\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\14\3\1\102\7\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\10\3\1\60\13\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\5\3\1\103\6\3\1\104\7\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\3\3\1\105\20\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\14\3\1\106\7\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\1\107\2\3\1\110\6\3\1\111\4\3"+
    "\1\112\4\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\21\3"+
    "\1\113\1\114\1\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\2\3\1\115\1\116\3\3\1\117\5\3"+
    "\1\0\2\3\3\0\2\3\1\0\12\3\1\120\4\3"+
    "\1\112\4\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\22\3"+
    "\1\114\1\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\7\3\1\117\5\3\1\0\2\3\37\0\1\121"+
    "\41\0\2\3\1\0\5\3\1\122\6\3\1\123\7\3"+
    "\1\0\1\3\1\124\1\3\1\125\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\50\0\1\126\1\127"+
    "\66\0\1\130\6\0\1\131\100\0\1\132\24\0\2\3"+
    "\1\0\5\3\1\133\6\3\1\134\7\3\1\0\1\3"+
    "\1\135\2\3\7\0\1\3\3\0\1\3\3\0\5\3"+
    "\1\136\7\3\1\0\1\137\1\3\3\0\2\3\1\0"+
    "\1\140\3\3\1\141\6\3\1\142\3\3\1\143\4\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\14\3\1\134\7\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\1\144\1\3\3\0\2\3\1\0\1\145\16\3"+
    "\1\146\4\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\17\3"+
    "\1\146\4\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\13\3"+
    "\1\142\3\3\1\143\4\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\14\3\1\123\7\3\1\0\3\3\1\125\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\42\0"+
    "\1\147\36\0\2\3\1\0\2\3\1\150\21\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\1\151\23\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\1\152\12\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\3\3\1\153\20\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\1\154\23\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\2\3\1\155\12\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\1\3\1\156\2\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\2\3\1\157\16\3\1\160\2\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\1\161\12\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\1\3\1\162"+
    "\2\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\3\3\1\163"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\5\3\1\164\16\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\1\165\23\3\1\0\4\3\7\0"+
    "\1\166\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\17\3\1\167\4\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\21\3\1\170\2\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\5\3\1\171\7\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\4\3\7\0\1\172\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\24\3\1\0\1\3\1\173\2\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\24\3\1\0\3\3\1\174\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\21\3"+
    "\1\175\2\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\22\3"+
    "\1\176\1\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\22\3"+
    "\1\177\1\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\4\3"+
    "\1\200\17\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\7\3"+
    "\1\201\11\3\1\202\2\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\2\3\1\203\12\3\1\0\2\3"+
    "\3\0\2\3\1\0\16\3\1\204\3\3\1\205\1\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\13\3\1\206\10\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\6\3\1\207\15\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\15\3\1\210\6\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\1\211"+
    "\3\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\4\3\1\212\10\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\2\3\1\213"+
    "\1\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\16\3\1\204\3\3\1\214"+
    "\1\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\2\0\36\121\1\0\37\121\1\0"+
    "\2\3\1\0\7\3\1\215\14\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\16\3\1\216\5\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\20\3\1\217\3\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\220\12\3\1\0"+
    "\2\3\3\0\2\3\1\0\23\3\1\221\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\7\3\1\222\5\3"+
    "\1\0\2\3\3\0\2\3\1\0\21\3\1\223\2\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\22\3\1\224\1\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\21\3\1\225\2\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\1\3\1\226\13\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\10\3\1\227\4\3"+
    "\1\0\2\3\3\0\2\3\1\0\4\3\1\230\17\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\3\3\1\231\20\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\12\3\1\232\11\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\13\3\1\233\10\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\10\3\1\234\4\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\1\235"+
    "\3\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\2\3\1\236"+
    "\1\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\4\0\1\237\74\0\2\3\1\0\3\3\1\240"+
    "\20\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\21\3\1\241"+
    "\2\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\12\3\1\242"+
    "\11\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\2\3\1\243"+
    "\12\3\1\0\2\3\3\0\2\3\1\0\4\3\1\244"+
    "\17\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\21\3\1\245"+
    "\2\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\5\3\1\246"+
    "\16\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\2\3\1\247"+
    "\21\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\14\3\1\250"+
    "\7\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\4\3\1\251"+
    "\17\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\13\3\1\251"+
    "\10\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\1\73\14\3"+
    "\1\0\2\3\3\0\2\3\1\0\1\3\1\252\22\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\3\3\1\253\20\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\10\3\1\252\13\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\21\3\1\254\2\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\21\3\1\255\2\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\22\3\1\256\1\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\1\257\6\3\1\260"+
    "\14\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\261\1\3\1\262\10\3\1\0\2\3\3\0"+
    "\2\3\1\0\1\263\6\3\1\264\14\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\2\3\1\265\1\3"+
    "\1\266\10\3\1\0\2\3\3\0\2\3\1\0\16\3"+
    "\1\264\1\263\4\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\7\3\1\267\3\3\1\266\1\3\1\0"+
    "\2\3\3\0\2\3\1\0\1\270\23\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\3\3\1\271\20\3\1\0\1\3"+
    "\1\272\2\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\1\273"+
    "\3\3\7\0\1\3\3\0\1\3\3\0\6\3\1\274"+
    "\6\3\1\275\2\3\3\0\2\3\1\0\12\3\1\271"+
    "\11\3\1\0\3\3\1\276\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\24\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\277\2\3\3\0\2\3\1\0\17\3\1\300\4\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\3\3\1\301\20\3"+
    "\1\0\1\3\1\302\2\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\12\3"+
    "\1\303\11\3\1\0\3\3\1\304\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\4\3\1\305\17\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\13\3\1\306\10\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\24\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\307\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\1\3\1\310\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\3\3\1\311\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\5\3\1\312\16\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\4\3"+
    "\7\0\1\313\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\14\3\1\314\7\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\24\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\14\3\1\315\1\0\2\3\3\0"+
    "\2\3\1\0\3\3\1\316\20\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\12\3\1\316\11\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\4\3\1\317\10\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\4\3\1\320\10\3\1\0\2\3\3\0"+
    "\2\3\1\0\1\321\23\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\24\3\1\0\1\322\3\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\24\3\1\0\2\3\1\323\1\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\17\3\1\321\4\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\24\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\13\3\1\320\1\3\1\0\2\3\3\0\2\3\1\0"+
    "\24\3\1\0\1\3\1\324\2\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\24\3\1\0\3\3\1\325\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\4\0\1\237\72\0\1\326"+
    "\1\0\2\3\1\0\4\3\1\327\17\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\13\3\1\330\10\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\24\3\1\0\1\331\3\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\5\3\1\332\16\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\2\3\1\333\1\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\21\3\1\334\2\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\1\335\3\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\6\3\1\336\15\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\15\3\1\337\6\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\1\3\1\340\22\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\5\3\1\341\16\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\5\3\1\342\16\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\5\3\1\343\7\3\1\0\2\3"+
    "\3\0\2\3\1\0\1\344\3\3\1\345\17\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\10\3\1\346\13\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\14\3\1\347\7\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\14\3\1\342\7\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\1\350\1\3\3\0\2\3\1\0\13\3\1\351\3\3"+
    "\1\352\4\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\14\3"+
    "\1\342\7\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\1\353\1\3\3\0\2\3\1\0"+
    "\24\3\1\0\1\354\3\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\21\3"+
    "\1\355\2\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\1\356"+
    "\23\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\1\3\1\357\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\62\0\1\360\16\0\2\3\1\0"+
    "\22\3\1\361\1\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\62\0\1\362\6\0"+
    "\1\362\7\0\2\3\1\0\24\3\1\0\2\3\1\363"+
    "\1\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\21\3\1\364\2\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\4\3\1\365\17\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\22\3\1\366\1\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\13\3\1\367\10\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\5\3\1\370\16\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\14\3\1\371\7\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\71\0\1\362\7\0\2\3\1\0\21\3\1\372"+
    "\2\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\22\3\1\373"+
    "\1\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\21\3\1\374"+
    "\2\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\1\3\1\375\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\22\3\1\376"+
    "\1\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\3\3\1\375\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\4\3\1\377\17\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\13\3\1\u0100\10\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\1\3"+
    "\1\u0101\2\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\3\3"+
    "\1\u0102\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\4\3\1\u0103\17\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\13\3\1\u0103\10\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\5\3\1\u0104\16\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\14\3\1\u0105\7\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\3\3\1\u0106\20\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\6\3\1\u0107\15\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\12\3\1\u0106\11\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\4\3\1\u0108\17\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\13\3\1\u0109\10\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\2\3\1\u010a\21\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\1\3\1\u010b"+
    "\2\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\1\3\1\u010c\13\3\1\0"+
    "\2\3\3\0\2\3\1\0\4\3\1\u010d\17\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\3\3\1\u010e\20\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\1\u010f\12\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\3\3\1\u0110"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\24\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\10\3\1\u0111\4\3\1\0\2\3"+
    "\3\0\2\3\1\0\12\3\1\u0112\11\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\13\3\1\u0113\10\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\24\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\10\3\1\u0114\4\3\1\0\2\3"+
    "\3\0\2\3\1\0\6\3\1\u0115\15\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\24\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\1\u0116\14\3\1\0\2\3\3\0"+
    "\2\3\1\0\6\3\1\u0117\15\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\4\3\1\u0118\17\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\6\0"+
    "\1\u0119\72\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\1\3\1\u011a"+
    "\25\0\1\u011b\53\0\2\3\1\0\15\3\1\u011c\6\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\1\u011d"+
    "\3\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\3\3\1\u011e\20\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\2\3\1\u011f"+
    "\1\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\12\3\1\u011e\11\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\1\3\1\u0120\13\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\10\3\1\u0121\4\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\u0122\12\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\7\3\1\u0123\5\3\1\0"+
    "\2\3\3\0\2\3\1\0\5\3\1\u0124\16\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\14\3\1\u0125\7\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\3\3\1\u0126\20\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\12\3\1\u0127\11\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\u0128\12\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\7\3\1\u0129\5\3\1\0"+
    "\2\3\3\0\2\3\1\0\6\3\1\u012a\15\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\15\3\1\u012b\6\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\24\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\5\3\1\u012c\7\3\1\0"+
    "\2\3\3\0\2\3\1\0\1\u012d\23\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\17\3\1\u012e\4\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\3\3\1\u012f\20\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\21\3\1\u0130\2\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\24\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\4\3\1\u0131\10\3\1\0\2\3"+
    "\3\0\2\3\1\0\1\u0132\23\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\1\u0133\3\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\12\3\1\u0134\11\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\22\3\1\u0135\1\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\24\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\4\3\1\u0136\10\3\1\0\2\3\3\0\2\3"+
    "\1\0\24\3\1\0\2\3\1\u0137\1\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\17\3\1\u0132\4\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\24\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\13\3\1\u0136\1\3\1\0\2\3\3\0\2\3"+
    "\1\0\24\3\1\0\1\3\1\u0138\2\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\1\u0139\23\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\24\3\1\0\1\3\1\u013a\2\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\6\3\1\u013b\15\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\60\0\1\u013c\20\0"+
    "\2\3\1\0\17\3\1\u013d\4\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\65\0"+
    "\1\u013e\13\0\2\3\1\0\24\3\1\0\3\3\1\u013f"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\24\3\1\0\1\3\1\u0140\2\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\3\0\2\3\1\0\24\3\1\0\3\3\1\u0141\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\5\3\1\u0142\16\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\14\3\1\u0143\7\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\5\3\1\u0144\16\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\14\3\1\u0145\7\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\4\3\1\u0146\17\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\13\3\1\u0146\10\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\1\u0147\3\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\24\3\1\0\2\3\1\u0148\1\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\3\3\1\u0149\20\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\12\3\1\u0149\11\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\7\3\1\u014a\14\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\16\3\1\u014b\5\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\24\3\1\0\4\3\7\0\1\u014c\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\24\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\u014d\12\3\1\0\2\3\3\0\2\3\1\0\24\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\7\3"+
    "\1\u014d\5\3\1\0\2\3\3\0\2\3\1\0\4\3"+
    "\1\u014e\17\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\6\3"+
    "\1\u014f\15\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\4\3"+
    "\1\u0150\17\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\24\3"+
    "\1\0\1\3\1\u0151\2\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\13\3"+
    "\1\u0152\10\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\15\3"+
    "\1\u0153\6\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\13\3"+
    "\1\u0154\10\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\24\3"+
    "\1\0\3\3\1\u0155\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\4\3\1\u0156"+
    "\17\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\4\3\1\u0157"+
    "\17\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\21\3\1\u0158"+
    "\2\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\5\3\1\u0159"+
    "\16\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\11\0\1\u015a\67\0\2\3\1\0"+
    "\13\3\1\u0157\10\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\20\0\1\u015a\60\0"+
    "\2\3\1\0\13\3\1\u0156\10\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\2\3\1\u015b\12\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\7\3\1\u015b\5\3\1\0\2\3\3\0"+
    "\2\3\1\0\4\3\1\u015c\17\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\13\3\1\u015c\10\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\3\3\1\u015d\20\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\12\3\1\u015e\11\3\1\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\1\3\1\u015f\2\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\24\3\1\0\3\3\1\u0160\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\3\3\1\u0161\20\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\12\3\1\u0161\11\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\5\3\1\u0162\16\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\4\3\1\u0163\17\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\3\3\1\u0164\20\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\24\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\u0165\12\3\1\0\2\3\3\0\2\3"+
    "\1\0\14\3\1\u0166\7\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\13\3\1\u0167\10\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\12\3\1\u0168\11\3\1\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\3\0\2\3"+
    "\1\0\24\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\7\3\1\u0169\5\3\1\0\2\3\3\0\2\3"+
    "\1\0\1\u016a\23\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\4\3\1\u016b\17\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\21\3\1\u016c\2\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\22\3\1\u016c\1\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\24\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\u016d\12\3\1\0\2\3\3\0\2\3\1\0"+
    "\24\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\7\3\1\u016e\5\3\1\0\2\3\3\0\2\3\1\0"+
    "\6\3\1\u016f\15\3\1\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\3\0\2\3\1\0"+
    "\1\u0170\23\3\1\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\3\0\2\3\1\0\24\3"+
    "\1\0\1\u0171\3\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\3\3\1\u0172"+
    "\20\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\15\3\1\u0173"+
    "\6\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\17\3\1\u0174"+
    "\4\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\2\3\1\u0175\1\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\12\3\1\u0172"+
    "\11\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\4\3\1\u0176"+
    "\17\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\1\u0177\23\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\3\3\1\u0178\20\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\12\3\1\u0178\11\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\7\3\1\u0179\14\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\2\3\1\u017a\12\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\1\3"+
    "\1\u017b\2\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\16\3\1\u017c\5\3"+
    "\1\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\7\3\1\u017a\5\3"+
    "\1\0\2\3\3\0\2\3\1\0\24\3\1\0\3\3"+
    "\1\u017d\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\3\0\2\3\1\0\6\3\1\u017e\12\3\1\u017f"+
    "\2\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\3\3\1\u0180"+
    "\20\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\2\3\1\u0181"+
    "\12\3\1\0\2\3\3\0\2\3\1\0\12\3\1\u0180"+
    "\11\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\7\3\1\u0182"+
    "\5\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\1\3\1\u0183\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\5\3\1\u0184"+
    "\7\3\1\0\2\3\3\0\2\3\1\0\3\3\1\u0185"+
    "\20\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\12\3\1\u0185"+
    "\11\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\3\3\1\u0186"+
    "\11\3\1\0\2\3\3\0\2\3\1\0\7\3\1\u0187"+
    "\14\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\6\3\1\u0188"+
    "\15\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\24\3\1\0"+
    "\1\3\1\u0189\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\3\3\1\u018a"+
    "\20\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\4\3\1\u018b"+
    "\17\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\3\0\2\3\1\0\3\3\1\u018c"+
    "\20\3\1\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20708];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\1\11\5\1\5\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\60\1\5\11\14\1\1\0"+
    "\67\1\1\0\35\1\1\0\1\1\1\0\7\1\1\0"+
    "\16\1\1\11\31\1\1\0\1\1\1\0\46\1\1\0"+
    "\1\1\1\0\40\1\1\0\1\1\1\0\33\1\1\11"+
    "\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 66: break;
        case 25: 
          { return ValorAbsoluto;
          }
        case 67: break;
        case 19: 
          { return RaizCuadrada;
          }
        case 68: break;
        case 21: 
          { return MayorOIgual;
          }
        case 69: break;
        case 61: 
          { return FinRepeticionMientras;
          }
        case 70: break;
        case 48: 
          { return InicioProceso;
          }
        case 71: break;
        case 14: 
          { return Menor;
          }
        case 72: break;
        case 22: 
          { return Asignacion;
          }
        case 73: break;
        case 52: 
          { return ComenzarSubProceso;
          }
        case 74: break;
        case 17: 
          { return Negacion;
          }
        case 75: break;
        case 65: 
          { return ConvertirVariableANumero;
          }
        case 76: break;
        case 54: 
          { return  EntoncesIntrucciones;
          }
        case 77: break;
        case 50: 
          { return InicioRepeticionMientras;
          }
        case 78: break;
        case 45: 
          { return TipoDeDatoEntero;
          }
        case 79: break;
        case 16: 
          { return Conjuncion;
          }
        case 80: break;
        case 18: 
          { return LogaritmoNatural;
          }
        case 81: break;
        case 38: 
          { return InicioPara;
          }
        case 82: break;
        case 32: 
          { return EnteroAleatorio;
          }
        case 83: break;
        case 28: 
          { return FuncionExponencial;
          }
        case 84: break;
        case 29: 
          { return Seno;
          }
        case 85: break;
        case 64: 
          { return ConvertirVariableATexto;
          }
        case 86: break;
        case 42: 
          { return MarcarDesde;
          }
        case 87: break;
        case 58: 
          { return FinProceso;
          }
        case 88: break;
        case 26: 
          { return Tangente;
          }
        case 89: break;
        case 12: 
          { return Modulo;
          }
        case 90: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 91: break;
        case 53: 
          { return MarcarConPaso;
          }
        case 92: break;
        case 60: 
          { return InicioSubProceso;
          }
        case 93: break;
        case 27: 
          { return Coseno;
          }
        case 94: break;
        case 36: 
          { return DefinirComoTipo;
          }
        case 95: break;
        case 55: 
          { return SalidaEscritura;
          }
        case 96: break;
        case 59: 
          { return ConcatenarCadenas;
          }
        case 97: break;
        case 41: 
          { return FinCondicionalSi;
          }
        case 98: break;
        case 20: 
          { return Distinto;
          }
        case 99: break;
        case 23: 
          { return MenorOIgual;
          }
        case 100: break;
        case 62: 
          { return FinAlgoritmo;
          }
        case 101: break;
        case 8: 
          { return Suma;
          }
        case 102: break;
        case 33: 
          { return Arcoseno;
          }
        case 103: break;
        case 49: 
          { return Longitud;
          }
        case 104: break;
        case 51: 
          { return TipoDeDatoCaracter;
          }
        case 105: break;
        case 47: 
          { return DefinirVariable;
          }
        case 106: break;
        case 39: 
          { return EnteroMasCercano;
          }
        case 107: break;
        case 44: 
          { return TipoDeDatoLogico;
          }
        case 108: break;
        case 34: 
          { return EntradaLectura;
          }
        case 109: break;
        case 9: 
          { return Resta;
          }
        case 110: break;
        case 13: 
          { return Mayor;
          }
        case 111: break;
        case 43: 
          { return HacerIntrucciones;
          }
        case 112: break;
        case 5: 
          { return Disyuncion;
          }
        case 113: break;
        case 57: 
          { return DefinirDimension;
          }
        case 114: break;
        case 24: 
          { return InicioCondicionalSi;
          }
        case 115: break;
        case 6: 
          { return PuntoYComa;
          }
        case 116: break;
        case 63: 
          { return  FinSubProceso;
          }
        case 117: break;
        case 1: 
          { return ERROR;
          }
        case 118: break;
        case 11: 
          { return Potenciacion;
          }
        case 119: break;
        case 10: 
          { return Multiplicacion;
          }
        case 120: break;
        case 40: 
          { return ParteEntera;
          }
        case 121: break;
        case 4: 
          { /*Ignore*/
          }
        case 122: break;
        case 31: 
          { return Arcocoseno;
          }
        case 123: break;
        case 46: 
          { return FinPara;
          }
        case 124: break;
        case 15: 
          { return Igual;
          }
        case 125: break;
        case 37: 
          { return CondicionalSi;
          }
        case 126: break;
        case 35: 
          { return TipoDeDatoReal;
          }
        case 127: break;
        case 7: 
          { return Division;
          }
        case 128: break;
        case 56: 
          { return InicioAlgoritmo;
          }
        case 129: break;
        case 30: 
          { return Arcotangente;
          }
        case 130: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
