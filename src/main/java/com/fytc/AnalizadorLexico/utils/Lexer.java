/* The following code was generated by JFlex 1.4.3 on 4/11/21 00:30 */

package com.fytc.AnalizadorLexico.utils;
import static com.fytc.AnalizadorLexico.utils.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/11/21 00:30 from the specification file
 * <tt>src/main/java/com/fytc/AnalizadorLexico/utils/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\16\2\0\1\3\22\0\1\66\4\0\1\23\1\33"+
    "\1\0\1\71\1\72\1\21\1\17\1\3\1\20\1\0\1\15\12\2"+
    "\2\0\1\30\1\31\1\27\2\0\1\41\1\42\1\40\1\26\1\45"+
    "\1\60\1\1\1\63\1\54\2\1\1\44\1\24\1\35\1\25\1\47"+
    "\1\1\1\37\1\43\1\50\1\51\2\1\1\46\1\32\1\52\3\0"+
    "\1\22\1\1\1\0\1\62\1\56\1\55\1\65\1\10\1\7\1\1"+
    "\1\14\1\4\2\1\1\11\1\61\1\5\1\57\1\64\1\1\1\53"+
    "\1\12\1\6\1\67\1\1\1\13\2\1\1\70\1\0\1\34\u21bf\0"+
    "\1\36\uddc3\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\7\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\2\1\13\1\2\1\14"+
    "\1\15\1\16\2\17\1\13\1\2\1\20\16\2\1\1"+
    "\1\2\1\21\5\2\1\22\3\2\1\4\4\2\1\23"+
    "\1\24\1\25\1\26\1\20\1\27\7\2\1\22\1\30"+
    "\15\2\1\0\11\2\1\12\7\2\1\31\1\32\2\2"+
    "\1\33\5\2\1\34\13\2\1\0\5\2\1\35\1\36"+
    "\7\2\1\37\1\2\1\0\1\40\1\41\3\2\1\42"+
    "\1\2\1\0\11\2\1\3\1\43\6\2\1\44\1\2"+
    "\1\45\2\2\1\46\1\2\1\0\3\2\1\47\1\0"+
    "\21\2\1\0\3\2\1\0\11\2\1\50\4\2\1\51"+
    "\2\2\1\0\3\2\1\0\7\2\1\52\1\53\1\2"+
    "\1\54\1\2\1\55\1\56\7\2\1\57\5\2\1\60"+
    "\3\2\1\61\3\2\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\73\0\73\0\73"+
    "\0\73\0\73\0\u02ff\0\166\0\u033a\0\u0375\0\u03b0\0\73"+
    "\0\166\0\73\0\73\0\u03eb\0\73\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\166\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\73\0\73\0\73\0\73"+
    "\0\166\0\166\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\166\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\166\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\166\0\166\0\u13d2\0\u140d\0\166\0\u1448"+
    "\0\u1483\0\u14be\0\u14f9\0\u1534\0\166\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\166\0\166"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\166"+
    "\0\u1af7\0\u1b32\0\166\0\166\0\u1b6d\0\u1ba8\0\u1be3\0\166"+
    "\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb"+
    "\0\u1df6\0\u1e31\0\u1e6c\0\73\0\166\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\166\0\u2009\0\166\0\u2044\0\u207f"+
    "\0\166\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\166\0\u21e1"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591"+
    "\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769"+
    "\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\166"+
    "\0\u2941\0\u297c\0\u29b7\0\u29f2\0\166\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b"+
    "\0\u2cb6\0\u2cf1\0\u2d2c\0\166\0\166\0\u2d67\0\166\0\u2da2"+
    "\0\166\0\73\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04"+
    "\0\u2f3f\0\166\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\166"+
    "\0\u30a1\0\u30dc\0\u3117\0\166\0\u3152\0\u318d\0\u31c8\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\3\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\5\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\3\1\41\1\42\1\43\1\3\1\44\1\45"+
    "\4\3\1\46\2\3\1\47\1\50\1\3\1\51\1\52"+
    "\1\53\1\5\2\3\1\54\1\2\74\0\2\3\1\0"+
    "\11\3\7\0\3\3\3\0\1\3\2\0\1\3\1\0"+
    "\27\3\1\0\2\3\4\0\1\4\73\0\1\5\12\0"+
    "\1\5\47\0\1\5\5\0\2\3\1\0\1\3\1\55"+
    "\1\3\1\56\5\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\27\3\1\0\2\3\3\0\2\3\1\0"+
    "\1\57\10\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\27\3\1\0\2\3\3\0\2\3\1\0\1\3"+
    "\1\60\3\3\1\61\1\62\2\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\27\3\1\0\2\3\3\0"+
    "\2\3\1\0\4\3\1\63\4\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\27\3\1\0\2\3\3\0"+
    "\2\3\1\0\1\64\10\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\1\65\1\3\3\0"+
    "\2\3\1\0\10\3\1\66\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\23\3\1\67\3\3\1\0\2\3\17\0\1\70"+
    "\56\0\2\3\1\0\11\3\7\0\1\3\1\71\1\3"+
    "\3\0\1\3\2\0\1\3\1\0\15\3\1\72\11\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\6\3\1\73\6\3"+
    "\1\74\11\3\1\0\2\3\32\0\1\75\1\76\61\0"+
    "\1\77\10\0\1\100\42\0\2\3\1\0\11\3\7\0"+
    "\1\3\1\101\1\3\3\0\1\3\2\0\1\3\1\0"+
    "\27\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\1\3\1\102"+
    "\4\3\1\103\20\3\1\0\2\3\3\0\2\3\1\0"+
    "\11\3\7\0\1\3\1\104\1\3\3\0\1\3\2\0"+
    "\1\3\1\0\27\3\1\0\2\3\3\0\2\3\1\0"+
    "\11\3\7\0\3\3\3\0\1\3\2\0\1\3\1\0"+
    "\3\3\1\105\5\3\1\106\1\3\1\107\13\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\6\3\1\110\3\3\1\111"+
    "\2\3\1\112\11\3\1\0\2\3\3\0\2\3\1\0"+
    "\11\3\7\0\3\3\3\0\1\3\2\0\1\113\1\0"+
    "\6\3\1\114\20\3\1\0\2\3\3\0\2\3\1\0"+
    "\11\3\7\0\3\3\3\0\1\3\2\0\1\115\1\0"+
    "\4\3\1\116\2\3\1\117\17\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\2\3\1\120\24\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\1\121\26\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\20\3\1\122\6\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\15\3\1\123\11\3\1\0\2\3\3\0\2\3"+
    "\1\0\1\124\10\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\27\3\1\0\2\3\3\0\2\3\1\0"+
    "\11\3\7\0\3\3\3\0\1\3\2\0\1\3\1\0"+
    "\2\3\1\125\24\3\1\0\2\3\3\0\2\3\1\0"+
    "\11\3\7\0\3\3\3\0\1\3\2\0\1\3\1\0"+
    "\23\3\1\126\3\3\1\0\2\3\3\0\2\3\1\0"+
    "\1\127\3\3\1\130\4\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\22\0\1\131"+
    "\53\0\2\3\1\0\2\3\1\56\6\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\1\3\1\132\7\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\2\3\1\133\6\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\6\3\1\134\2\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\16\3\1\135\10\3\1\0\2\3"+
    "\3\0\2\3\1\0\4\3\1\136\4\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\1\3\1\137\7\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\17\3\1\140\7\3\1\0\2\3"+
    "\3\0\2\3\1\0\1\141\10\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\27\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\16\3\1\142\10\3\1\0\2\3\2\0"+
    "\16\70\1\0\54\70\1\0\2\3\1\0\11\3\7\0"+
    "\2\3\1\143\3\0\1\3\2\0\1\3\1\0\27\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\6\3\1\144\20\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\4\3\1\145\14\3"+
    "\1\146\5\3\1\0\2\3\3\0\2\3\1\0\11\3"+
    "\7\0\1\147\2\3\3\0\1\3\2\0\1\3\1\0"+
    "\27\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\2\3\1\150\3\0\1\3\2\0\1\3\1\0\27\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\1\151"+
    "\2\3\3\0\1\3\2\0\1\152\1\0\4\3\1\153"+
    "\22\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\4\3\1\154"+
    "\22\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\2\3\1\155"+
    "\24\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\2\3\1\156"+
    "\24\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\157\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\3\3\1\160\23\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\161\1\0\27\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\6\3\1\162\20\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\11\3\1\163\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\1\3\1\164\25\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\10\3\1\165\16\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\1\166\26\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\12\3\1\167\14\3\1\0\2\3\3\0\2\3"+
    "\1\0\1\3\1\170\7\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\22\3\1\171\4\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\172\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\4\3\1\173\4\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\1\3\1\174\25\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\14\3\1\175\12\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\22\3\1\176\4\3\1\0\2\3\3\0\2\3"+
    "\1\0\3\3\1\177\2\3\1\200\2\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\4\0\1\201\71\0\2\3\1\0\6\3\1\202\2\3"+
    "\7\0\3\3\3\0\1\3\2\0\1\3\1\0\22\3"+
    "\1\203\2\3\1\204\1\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\20\3\1\205\6\3\1\0\2\3\3\0\2\3"+
    "\1\0\4\3\1\56\4\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\14\3\1\206\12\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\14\3\1\207\12\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\20\3\1\210\6\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\25\3\1\211\1\3\1\0\2\3\3\0\2\3"+
    "\1\0\5\3\1\134\3\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\4\3\1\212\4\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\213"+
    "\1\0\27\3\1\0\2\3\3\0\2\3\1\0\11\3"+
    "\7\0\2\3\1\214\3\0\1\3\2\0\1\3\1\0"+
    "\27\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\15\3\1\215"+
    "\11\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\6\3\1\216"+
    "\20\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\1\3\1\217\1\3\3\0\1\3\2\0\1\3\1\0"+
    "\27\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\1\3\1\220\1\3\3\0\1\3\2\0\1\3\1\0"+
    "\6\3\1\221\20\3\1\0\2\3\3\0\2\3\1\0"+
    "\11\3\7\0\3\3\3\0\1\3\2\0\1\3\1\0"+
    "\27\3\1\222\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\223\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\1\224\26\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\10\3\1\225\16\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\1\3\1\210\1\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\1\207\26\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\1\3\1\226\1\3\3\0"+
    "\1\3\2\0\1\3\1\0\27\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\1\227\26\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\2\3\1\230\24\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\231"+
    "\1\0\27\3\1\0\2\3\3\0\2\3\1\0\11\3"+
    "\7\0\3\3\3\0\1\3\2\0\1\3\1\0\27\3"+
    "\1\232\2\3\3\0\2\3\1\0\4\3\1\233\4\3"+
    "\7\0\3\3\3\0\1\3\2\0\1\3\1\0\20\3"+
    "\1\220\6\3\1\0\2\3\3\0\2\3\1\0\11\3"+
    "\7\0\1\234\2\3\3\0\1\3\2\0\1\3\1\0"+
    "\4\3\1\235\3\3\1\236\16\3\1\0\2\3\3\0"+
    "\2\3\1\0\1\3\1\237\7\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\27\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\6\3\1\240\20\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\23\3\1\230\3\3\1\0\2\3\3\0"+
    "\2\3\1\0\4\3\1\241\4\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\27\3\1\0\2\3\3\0"+
    "\2\3\1\0\1\242\10\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\26\3\1\243\1\0\2\3\4\0\1\201\67\0"+
    "\1\244\1\0\2\3\1\0\1\245\10\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\1\246"+
    "\1\3\3\0\2\3\1\0\1\247\10\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\23\3\1\250\3\3\1\0\2\3"+
    "\3\0\2\3\1\0\1\3\1\251\7\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\1\252\10\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\27\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\14\3\1\253\12\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\14\3\1\254\12\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\11\3\1\255\15\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\6\3\1\256\20\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\257\1\0\27\3\1\0\2\3\3\0\2\3\1\0"+
    "\11\3\7\0\3\3\3\0\1\3\2\0\1\260\1\0"+
    "\27\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\261\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\262\1\0\27\3\1\0\2\3\51\0"+
    "\1\263\24\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\1\264\26\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\265\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\15\3\1\266\11\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\1\3\1\267\25\3\1\0\2\3\66\0\1\270"+
    "\7\0\2\3\1\0\1\3\1\271\7\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\15\3\1\272\11\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\12\3\1\273\2\3\1\245\11\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\2\3\1\274\24\3"+
    "\1\0\2\3\3\0\2\3\1\0\2\3\1\275\6\3"+
    "\7\0\3\3\3\0\1\3\2\0\1\3\1\0\27\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\1\254\26\3\1\0"+
    "\2\3\3\0\2\3\1\0\1\3\1\276\7\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\1\3\1\277\7\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\4\3\1\256\4\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\17\3\1\300\7\3\1\0"+
    "\2\3\3\0\2\3\1\0\4\3\1\301\4\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\14\3\1\302\12\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\16\3\1\303\10\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\17\3\1\304\7\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\20\3\1\305\6\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\1\306\26\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\15\3\1\307\11\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\4\3\1\310\22\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\13\3\1\311\13\3\1\0\2\3"+
    "\43\0\1\312\32\0\2\3\1\0\11\3\7\0\1\3"+
    "\1\313\1\3\3\0\1\3\2\0\1\3\1\0\27\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\1\3\1\314\25\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\3\3\1\315\23\3"+
    "\1\0\2\3\64\0\1\316\11\0\2\3\1\0\11\3"+
    "\7\0\3\3\3\0\1\3\2\0\1\3\1\0\27\3"+
    "\1\0\1\3\1\317\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\6\3\1\320"+
    "\20\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\3\3\1\321"+
    "\23\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\1\322\26\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\14\3\1\323\12\3"+
    "\1\0\2\3\3\0\2\3\1\0\6\3\1\324\2\3"+
    "\7\0\3\3\3\0\1\3\2\0\1\3\1\0\27\3"+
    "\1\0\2\3\3\0\2\3\1\0\1\325\10\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\25\3\1\326\1\3\1\0"+
    "\2\3\3\0\2\3\1\0\1\3\1\327\7\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\23\3\1\330\3\3\1\0"+
    "\2\3\3\0\2\3\1\0\4\3\1\331\4\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\1\332\10\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\16\3\1\333\10\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\2\3\1\334\24\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\1\335\26\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\15\3\1\336\11\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\2\3\1\337\24\3\1\0\2\3\45\0"+
    "\1\340\30\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\1\3\1\341\25\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\6\3\1\342\20\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\15\3\1\343\11\3\1\0"+
    "\2\3\14\0\1\344\61\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\23\3\1\345"+
    "\3\3\1\0\2\3\3\0\2\3\1\0\11\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\346\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\10\3\1\347\16\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\2\3\1\330\24\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\23\3\1\350\3\3\1\0"+
    "\2\3\3\0\2\3\1\0\1\351\10\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\14\3\1\335\12\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\14\3\1\352\12\3\1\0\2\3"+
    "\3\0\2\3\1\0\2\3\1\353\6\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\6\3\1\354\2\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\14\3\1\355\12\3\1\0\2\3"+
    "\3\0\2\3\1\0\4\3\1\356\4\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\4\3\1\357\22\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\1\3\1\360\1\3"+
    "\3\0\1\3\2\0\1\3\1\0\27\3\1\0\2\3"+
    "\3\0\2\3\1\0\11\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\1\361\26\3\1\0\2\3\27\0"+
    "\1\362\46\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\6\3\1\363\20\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\4\3\1\354\22\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\1\355\26\3\1\0\2\3"+
    "\61\0\1\362\14\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\14\3\1\361\12\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\11\3\1\364\15\3"+
    "\1\0\2\3\3\0\2\3\1\0\11\3\7\0\3\3"+
    "\3\0\1\3\2\0\1\3\1\0\1\365\26\3\1\0"+
    "\2\3\3\0\2\3\1\0\6\3\1\357\2\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\20\3\1\366\6\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\20\3\1\367\6\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\3\1\0\14\3\1\370\12\3\1\0"+
    "\2\3\3\0\2\3\1\0\6\3\1\371\2\3\7\0"+
    "\3\3\3\0\1\3\2\0\1\3\1\0\27\3\1\0"+
    "\2\3\3\0\2\3\1\0\11\3\7\0\3\3\3\0"+
    "\1\3\2\0\1\372\1\0\27\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\4\3\1\373\22\3\1\0\2\3\3\0"+
    "\2\3\1\0\11\3\7\0\3\3\3\0\1\3\2\0"+
    "\1\3\1\0\1\374\26\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\1\3\1\375\1\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\1\3\1\372\7\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\16\3\1\376\10\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\23\3\1\377\3\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\20\3\1\u0100\6\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\1\3\1\u0100\1\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\2\3\1\u0101\24\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\1\3\1\u0102\25\3\1\0\2\3\3\0\2\3"+
    "\1\0\4\3\1\u0103\4\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\6\3\1\u0104\2\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\4\3\1\u0104\22\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\6\3\1\u0105\20\3\1\0\2\3\3\0\2\3"+
    "\1\0\6\3\1\u0106\2\3\7\0\3\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\4\3\1\u0107\22\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\3\3\3\0\1\3\2\0\1\3"+
    "\1\0\20\3\1\u0108\6\3\1\0\2\3\3\0\2\3"+
    "\1\0\11\3\7\0\1\3\1\u0108\1\3\3\0\1\3"+
    "\2\0\1\3\1\0\27\3\1\0\2\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12803];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\5\11\5\1\1\11\1\1\2\11"+
    "\1\1\1\11\37\1\4\11\30\1\1\0\47\1\1\0"+
    "\20\1\1\0\7\1\1\0\11\1\1\11\16\1\1\0"+
    "\4\1\1\0\21\1\1\0\3\1\1\0\21\1\1\0"+
    "\3\1\1\0\15\1\1\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 51: break;
        case 26: 
          { return ValorAbsoluto;
          }
        case 52: break;
        case 23: 
          { return RaizCuadrada;
          }
        case 53: break;
        case 20: 
          { return MayorOIgual;
          }
        case 54: break;
        case 49: 
          { return FinRepeticionMientras;
          }
        case 55: break;
        case 36: 
          { return  HacerIntrucciones;
          }
        case 56: break;
        case 13: 
          { return Menor;
          }
        case 57: break;
        case 21: 
          { return Asignacion;
          }
        case 58: break;
        case 45: 
          { return ComenzarSubProceso;
          }
        case 59: break;
        case 16: 
          { return Negacion;
          }
        case 60: break;
        case 42: 
          { return  EntoncesIntrucciones;
          }
        case 61: break;
        case 44: 
          { return InicioRepeticionMientras;
          }
        case 62: break;
        case 31: 
          { return  DefinirComoTipo;
          }
        case 63: break;
        case 15: 
          { return Conjuncion;
          }
        case 64: break;
        case 24: 
          { return LogaritmoNatural;
          }
        case 65: break;
        case 43: 
          { return  SalidaEscritura;
          }
        case 66: break;
        case 33: 
          { return EnteroAleatorio;
          }
        case 67: break;
        case 34: 
          { return InicioPara;
          }
        case 68: break;
        case 28: 
          { return FuncionExponencial;
          }
        case 69: break;
        case 37: 
          { return  MarcarDesde;
          }
        case 70: break;
        case 17: 
          { lexeme=yytext(); return Reservadas;
          }
        case 71: break;
        case 27: 
          { return Seno;
          }
        case 72: break;
        case 10: 
          { return Modulo;
          }
        case 73: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 74: break;
        case 46: 
          { return MarcarConPaso;
          }
        case 75: break;
        case 48: 
          { return InicioSubProceso;
          }
        case 76: break;
        case 25: 
          { return Coseno;
          }
        case 77: break;
        case 35: 
          { return FinCondicionalSi;
          }
        case 78: break;
        case 19: 
          { return Distinto;
          }
        case 79: break;
        case 22: 
          { return MenorOIgual;
          }
        case 80: break;
        case 6: 
          { return Suma;
          }
        case 81: break;
        case 41: 
          { return DefinirVariable;
          }
        case 82: break;
        case 38: 
          { return EnteroMasCercano;
          }
        case 83: break;
        case 29: 
          { return EntradaLectura;
          }
        case 84: break;
        case 7: 
          { return Resta;
          }
        case 85: break;
        case 12: 
          { return Mayor;
          }
        case 86: break;
        case 11: 
          { return Disyuncion;
          }
        case 87: break;
        case 47: 
          { return DefinirDimension;
          }
        case 88: break;
        case 18: 
          { return InicioCondicionalSi;
          }
        case 89: break;
        case 50: 
          { return  FinSubProceso;
          }
        case 90: break;
        case 1: 
          { return ERROR;
          }
        case 91: break;
        case 9: 
          { return Potenciacion;
          }
        case 92: break;
        case 8: 
          { return Multiplicacion;
          }
        case 93: break;
        case 39: 
          { return ParteEntera;
          }
        case 94: break;
        case 4: 
          { /*Ignore*/
          }
        case 95: break;
        case 40: 
          { return FinPara;
          }
        case 96: break;
        case 14: 
          { return Igual;
          }
        case 97: break;
        case 30: 
          { return CondicionalSi;
          }
        case 98: break;
        case 5: 
          { return Division;
          }
        case 99: break;
        case 32: 
          { return Arcotangente;
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
