/* The following code was generated by JFlex 1.4.3 on 9/11/21 16:03 */

package com.fytc.AnalizadorLexico.utils;
import static com.fytc.AnalizadorLexico.utils.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/11/21 16:03 from the specification file
 * <tt>src/main/java/com/fytc/AnalizadorLexico/utils/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\42\2\0\1\3\22\0\1\75\1\0\1\34\2\0"+
    "\1\47\1\55\1\0\1\32\1\33\1\45\1\43\1\3\1\44\1\0"+
    "\1\41\12\2\1\31\1\30\1\52\1\53\1\51\2\0\1\4\1\61"+
    "\1\35\1\50\1\36\1\24\1\6\1\71\1\11\2\1\1\5\1\13"+
    "\1\25\1\7\1\64\1\1\1\10\1\62\1\12\1\65\1\66\1\1"+
    "\1\63\1\54\1\60\3\0\1\46\1\1\1\0\1\23\1\70\1\37"+
    "\1\74\1\40\1\27\1\15\1\72\1\20\2\1\1\14\1\22\1\26"+
    "\1\16\1\73\1\1\1\17\1\67\1\21\1\76\4\1\1\77\1\0"+
    "\1\56\u1f9f\0\1\34\u021f\0\1\57\uddc3\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\1\5\12\2"+
    "\1\6\1\7\1\10\1\11\1\12\4\2\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\2\1\21\1\22\1\23"+
    "\2\24\1\1\1\25\20\2\1\26\3\2\1\27\11\2"+
    "\1\25\1\2\1\0\12\2\1\4\4\2\1\30\1\31"+
    "\1\32\1\33\1\5\2\34\17\2\1\35\12\2\1\36"+
    "\1\2\1\20\5\2\1\0\3\2\1\37\6\2\1\40"+
    "\12\2\1\41\12\2\1\42\1\2\1\43\1\44\1\45"+
    "\3\2\1\46\1\47\15\2\1\3\1\2\1\50\3\2"+
    "\1\0\1\2\1\0\7\2\1\0\6\2\1\51\2\2"+
    "\1\52\11\2\1\53\1\54\4\2\1\55\15\2\1\0"+
    "\1\2\1\0\12\2\1\56\5\2\1\57\2\2\1\60"+
    "\22\2\1\0\1\2\1\0\2\2\1\61\23\2\1\62"+
    "\11\2\1\0\1\2\1\0\7\2\1\63\2\2\1\64"+
    "\2\2\1\65\1\66\10\2\1\67\1\70\2\2\1\71"+
    "\1\72\1\73\4\2\1\74\12\2\1\75\5\2\1\76"+
    "\3\2\1\77\1\2\1\100\1\2\1\101\5\2\1\102"+
    "\4\2\1\103\4\2\1\104\1\2\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[399];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\200"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\100\0\100\0\u0440\0\100\0\100\0\u0480"+
    "\0\u04c0\0\u0500\0\u0540\0\u0580\0\100\0\100\0\100\0\100"+
    "\0\100\0\u05c0\0\u0600\0\u0640\0\100\0\200\0\100\0\u0680"+
    "\0\100\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840"+
    "\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40"+
    "\0\u0a80\0\200\0\u0ac0\0\u0b00\0\u0b40\0\200\0\u0b80\0\u0bc0"+
    "\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\200"+
    "\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180"+
    "\0\u11c0\0\100\0\100\0\100\0\100\0\100\0\u1200\0\u1240"+
    "\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440"+
    "\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\200"+
    "\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800"+
    "\0\u1840\0\u1880\0\200\0\u18c0\0\200\0\u1900\0\u1940\0\u1980"+
    "\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\200\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\200\0\u1cc0\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00"+
    "\0\200\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0"+
    "\0\u2100\0\u2140\0\u2180\0\200\0\u21c0\0\200\0\200\0\200"+
    "\0\u2200\0\u2240\0\u2280\0\200\0\200\0\u22c0\0\u2300\0\u2340"+
    "\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540"+
    "\0\u2580\0\u25c0\0\100\0\u2600\0\200\0\u2640\0\u2680\0\u26c0"+
    "\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0"+
    "\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0"+
    "\0\u2b00\0\200\0\u2b40\0\u2b80\0\200\0\u2bc0\0\u2c00\0\u2c40"+
    "\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\200\0\200"+
    "\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\200\0\u2f00\0\u2f40\0\u2f80"+
    "\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180"+
    "\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380"+
    "\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\200"+
    "\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\200\0\u36c0\0\u3700"+
    "\0\200\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0"+
    "\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0"+
    "\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0"+
    "\0\200\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80"+
    "\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080"+
    "\0\u40c0\0\u4100\0\u4140\0\u4180\0\200\0\u41c0\0\u4200\0\u4240"+
    "\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400\0\u4440"+
    "\0\u4480\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600\0\u4640"+
    "\0\200\0\u4680\0\u46c0\0\200\0\u4700\0\u4740\0\200\0\200"+
    "\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880\0\u48c0\0\u4900\0\u4940"+
    "\0\200\0\200\0\u4980\0\u49c0\0\100\0\200\0\200\0\u4a00"+
    "\0\u4a40\0\u4a80\0\u4ac0\0\200\0\u4b00\0\u4b40\0\u4b80\0\u4bc0"+
    "\0\u4c00\0\u4c40\0\u4c80\0\u4cc0\0\u4d00\0\u4d40\0\200\0\u4d80"+
    "\0\u4dc0\0\u4e00\0\u4e40\0\u4e80\0\200\0\u4ec0\0\u4f00\0\u4f40"+
    "\0\200\0\u4f80\0\200\0\u4fc0\0\200\0\u5000\0\u5040\0\u5080"+
    "\0\u50c0\0\u5100\0\200\0\u5140\0\u5180\0\u51c0\0\u5200\0\200"+
    "\0\u5240\0\u5280\0\u52c0\0\u5300\0\200\0\u5340\0\200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[399];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\2\3\1\15\2\3"+
    "\1\16\1\17\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\5\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\2\3\1\52"+
    "\1\3\1\53\2\3\1\54\1\3\1\55\1\56\1\57"+
    "\1\60\1\5\2\3\101\0\2\3\1\0\24\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\2\0\1\4\100\0\1\5\36\0\1\5\32\0"+
    "\1\5\3\0\2\3\1\0\1\3\1\61\4\3\1\62"+
    "\1\3\1\63\13\3\5\0\1\64\3\3\7\0\1\3"+
    "\3\0\1\3\3\0\1\65\1\66\1\67\12\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\70\6\3\1\71"+
    "\6\3\1\72\2\3\5\0\1\3\1\73\1\3\1\74"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\75\23\3\5\0\1\76\1\77"+
    "\1\3\1\100\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\101\3\3\1\102"+
    "\17\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\3\3\1\103"+
    "\1\3\1\104\6\3\1\105\7\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\12\3\1\71\11\3\5\0\3\3\1\74"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\3\3\1\100\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\14\3\1\105\7\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\10\3\1\63\13\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\5\3\1\106\6\3\1\107\7\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\110\20\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\14\3\1\111\7\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\44\0\1\112\34\0\2\3\1\0\1\113\2\3"+
    "\1\114\6\3\1\115\4\3\1\116\4\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\21\3\1\117\1\120\1\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\2\3\1\121"+
    "\1\122\3\3\1\123\5\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\124\4\3\1\116\4\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\22\3\1\120\1\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\7\3\1\123\5\3"+
    "\1\0\2\3\41\0\1\125\37\0\2\3\1\0\5\3"+
    "\1\126\6\3\1\127\7\3\5\0\1\3\1\130\1\3"+
    "\1\131\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\52\0\1\132\1\133\70\0\1\134\6\0\1\135"+
    "\102\0\1\136\22\0\2\3\1\0\5\3\1\137\6\3"+
    "\1\140\7\3\5\0\1\3\1\141\2\3\7\0\1\3"+
    "\3\0\1\3\3\0\5\3\1\142\7\3\1\0\1\143"+
    "\1\3\1\0\2\3\1\0\1\144\3\3\1\145\6\3"+
    "\1\146\3\3\1\147\4\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\14\3\1\140\7\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\1\150\1\3\1\0"+
    "\2\3\1\0\1\151\16\3\1\152\4\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\17\3\1\152\4\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\13\3\1\146\3\3\1\147\4\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\14\3\1\127\7\3"+
    "\5\0\3\3\1\131\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\2\3\1\153"+
    "\21\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\1\154\23\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\11\3\1\155\12\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\3\3\1\156\20\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\157\23\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\160\12\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\1\3\1\161"+
    "\2\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\2\3\1\162\16\3\1\163"+
    "\2\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\11\3\1\164"+
    "\12\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\5\0"+
    "\1\3\1\165\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\5\0"+
    "\3\3\1\166\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\5\3\1\167\16\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\170\23\3\5\0"+
    "\4\3\7\0\1\171\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\17\3\1\172\4\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\21\3\1\173\2\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\5\3\1\174\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\4\3\7\0"+
    "\1\175\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\1\3\1\176\2\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\3\3\1\177\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\21\3\1\200\2\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\22\3\1\201\1\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\22\3\1\202\1\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\2\0\1\203"+
    "\76\0\2\3\1\0\4\3\1\204\17\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\7\3\1\205\11\3\1\206\2\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\207\12\3\1\0\2\3\1\0\2\3\1\0\16\3"+
    "\1\210\3\3\1\211\1\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\13\3\1\212\10\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\6\3\1\213\15\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\15\3\1\214\6\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\5\0\1\215\3\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\4\3\1\216\10\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\2\3\1\217\1\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\16\3\1\210\3\3\1\220\1\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\42\125"+
    "\1\0\35\125\1\0\2\3\1\0\7\3\1\221\14\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\16\3\1\222\5\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\20\3\1\223\3\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\224\12\3\1\0\2\3\1\0\2\3\1\0\23\3"+
    "\1\225\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\7\3\1\226\5\3\1\0\2\3\1\0\2\3\1\0"+
    "\21\3\1\227\2\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\22\3\1\230\1\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\21\3\1\231\2\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\1\3\1\232\13\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\10\3\1\233\4\3\1\0\2\3\1\0\2\3\1\0"+
    "\4\3\1\234\17\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\3\3\1\235\20\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\12\3\1\236\11\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\13\3\1\237\10\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\10\3\1\240\4\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\1\241\3\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\2\3\1\242\1\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\243\20\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\21\3"+
    "\1\244\2\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\12\3"+
    "\1\245\11\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\246\12\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\247\17\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\21\3"+
    "\1\250\2\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\5\3"+
    "\1\251\16\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\2\3"+
    "\1\252\21\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\14\3"+
    "\1\253\7\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\254\17\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\13\3"+
    "\1\254\10\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\1\76"+
    "\14\3\1\0\2\3\1\0\2\3\1\0\1\3\1\255"+
    "\22\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\3\3\1\256"+
    "\20\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\10\3\1\255"+
    "\13\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\21\3\1\257"+
    "\2\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\21\3\1\260"+
    "\2\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\22\3\1\261"+
    "\1\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\1\262\6\3"+
    "\1\263\14\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\264\1\3\1\265\10\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\266\6\3\1\267\14\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\2\3\1\270"+
    "\1\3\1\271\10\3\1\0\2\3\1\0\2\3\1\0"+
    "\16\3\1\267\1\266\4\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\7\3\1\272\3\3\1\271\1\3"+
    "\1\0\2\3\2\0\1\203\30\0\1\273\45\0\2\3"+
    "\1\0\1\274\23\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\3\3\1\275\20\3\5\0\1\3\1\276\2\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\1\277\3\3\7\0\1\3"+
    "\3\0\1\3\3\0\6\3\1\300\6\3\1\301\2\3"+
    "\1\0\2\3\1\0\12\3\1\275\11\3\5\0\3\3"+
    "\1\302\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\303\2\3\1\0"+
    "\2\3\1\0\17\3\1\304\4\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\3\3\1\305\20\3\5\0\1\3\1\306"+
    "\2\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\12\3\1\307\11\3\5\0"+
    "\3\3\1\310\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\4\3\1\311\17\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\13\3\1\312\10\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\313\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\1\3\1\314\2\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\3\3\1\315\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\5\3\1\316\16\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\4\3\7\0\1\317\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\14\3\1\320\7\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\14\3\1\321\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\322\20\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\12\3"+
    "\1\322\11\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\4\3"+
    "\1\323\10\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\4\3"+
    "\1\324\10\3\1\0\2\3\1\0\2\3\1\0\1\325"+
    "\23\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\5\0"+
    "\1\326\3\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\2\3"+
    "\1\327\1\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\17\3\1\325\4\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\13\3\1\324\1\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\1\3"+
    "\1\330\2\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\3\3"+
    "\1\331\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\4\3\1\332\17\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\13\3\1\333\10\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\1\334\3\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\5\3\1\335\16\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\2\3\1\336\1\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\21\3\1\337\2\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\1\340\3\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\6\3\1\341\15\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\15\3\1\342\6\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\1\343\22\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\5\3\1\344\16\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\5\3\1\345\16\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\5\3\1\346\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\347\3\3\1\350\17\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\10\3\1\351\13\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\14\3\1\352\7\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\14\3\1\345\7\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\1\353\1\3\1\0\2\3\1\0\13\3\1\354"+
    "\3\3\1\355\4\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\14\3\1\345\7\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\1\356\1\3\1\0\2\3"+
    "\1\0\24\3\5\0\1\357\3\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\21\3\1\360\2\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\361\23\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\1\3\1\362\2\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\64\0\1\363\14\0\2\3"+
    "\1\0\22\3\1\364\1\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\64\0\1\365"+
    "\6\0\1\365\5\0\2\3\1\0\24\3\5\0\2\3"+
    "\1\366\1\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\21\3\1\367\2\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\4\3\1\370\17\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\22\3\1\371\1\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\13\3\1\372\10\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\5\3\1\373\16\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\14\3\1\374\7\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\73\0\1\365\5\0\2\3\1\0\21\3"+
    "\1\375\2\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\22\3"+
    "\1\376\1\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\21\3"+
    "\1\377\2\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\1\3\1\u0100\2\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\22\3"+
    "\1\u0101\1\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\3\3\1\u0100\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\4\3\1\u0102"+
    "\17\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\13\3\1\u0103"+
    "\10\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\5\0"+
    "\1\3\1\u0104\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\5\0"+
    "\3\3\1\u0105\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\4\3\1\u0106\17\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\13\3\1\u0106\10\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\5\3\1\u0107\16\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\14\3\1\u0108\7\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\3\3\1\u0109\20\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\6\3\1\u010a\15\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\12\3\1\u0109\11\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\4\3\1\u010b\17\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\13\3\1\u010c\10\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\2\3\1\u010d\21\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\1\3"+
    "\1\u010e\2\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\1\3\1\u010f\13\3"+
    "\1\0\2\3\1\0\2\3\1\0\4\3\1\u0110\17\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\3\3\1\u0111\20\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\11\3\1\u0112\12\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\3\3"+
    "\1\u0113\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\10\3\1\u0114\4\3\1\0"+
    "\2\3\1\0\2\3\1\0\12\3\1\u0115\11\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\13\3\1\u0116\10\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\10\3\1\u0117\4\3\1\0"+
    "\2\3\1\0\2\3\1\0\6\3\1\u0118\15\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\1\u0119\14\3\1\0\2\3"+
    "\1\0\2\3\1\0\6\3\1\u011a\15\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\4\3\1\u011b\17\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\4\0\1\u011c\74\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\1\3"+
    "\1\u011d\23\0\1\u011e\55\0\2\3\1\0\15\3\1\u011f"+
    "\6\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\5\0"+
    "\1\u0120\3\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\3\3\1\u0121\20\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\2\3"+
    "\1\u0122\1\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\12\3\1\u0121\11\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\1\3\1\u0123\13\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\10\3\1\u0124\4\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\2\3\1\u0125\12\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\7\3\1\u0126\5\3"+
    "\1\0\2\3\1\0\2\3\1\0\5\3\1\u0127\16\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\14\3\1\u0128\7\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\3\3\1\u0129\20\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\12\3\1\u012a\11\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\2\3\1\u012b\12\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\7\3\1\u012c\5\3"+
    "\1\0\2\3\1\0\2\3\1\0\6\3\1\u012d\15\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\15\3\1\u012e\6\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\5\3\1\u012f\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\u0130\23\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\17\3\1\u0131\4\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\u0132\20\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\21\3\1\u0133\2\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\4\3\1\u0134\10\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\u0135\23\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\1\u0136\3\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\12\3\1\u0137\11\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\22\3\1\u0138\1\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\4\3\1\u0139\10\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\2\3\1\u013a\1\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\17\3\1\u0135\4\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\13\3\1\u0139\1\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\1\3\1\u013b\2\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\u013c\23\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\5\0\1\3\1\u013d\2\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\6\3\1\u013e\15\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\62\0\1\u013f"+
    "\16\0\2\3\1\0\17\3\1\u0140\4\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\67\0\1\u0141\11\0\2\3\1\0\24\3\5\0\3\3"+
    "\1\u0142\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\1\3\1\u0143"+
    "\2\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\5\0\3\3\1\u0144"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\5\3\1\u0145\16\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\14\3\1\u0146\7\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\5\3\1\u0147\16\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\14\3\1\u0148\7\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\4\3\1\u0149\17\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\13\3\1\u0149\10\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\1\u014a\3\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\2\3\1\u014b\1\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\3\3\1\u014c\20\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\12\3\1\u014c\11\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\7\3\1\u014d\14\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\16\3\1\u014e\5\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\4\3\7\0\1\u014f\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\u0150\12\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\7\3\1\u0150\5\3\1\0\2\3\1\0\2\3\1\0"+
    "\4\3\1\u0151\17\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\6\3\1\u0152\15\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\4\3\1\u0153\17\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\1\3\1\u0154\2\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\13\3\1\u0155\10\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\15\3\1\u0156\6\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\13\3\1\u0157\10\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\3\3\1\u0158\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\u0159\17\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\u015a\17\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\21\3"+
    "\1\u015b\2\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\5\3"+
    "\1\u015c\16\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\7\0\1\u015d\71\0\2\3"+
    "\1\0\13\3\1\u015a\10\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\16\0\1\u015d"+
    "\62\0\2\3\1\0\13\3\1\u0159\10\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\2\3\1\u015e\12\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\7\3\1\u015e\5\3\1\0\2\3"+
    "\1\0\2\3\1\0\4\3\1\u015f\17\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\13\3\1\u015f\10\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\3\3\1\u0160\20\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\12\3\1\u0161\11\3\5\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\1\3\1\u0162\2\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\5\0\3\3\1\u0163\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\3\3\1\u0164\20\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\12\3\1\u0164\11\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\5\3\1\u0165\16\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\4\3\1\u0166\17\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\3\3\1\u0167\20\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\2\3\1\u0168\12\3\1\0\2\3\1\0"+
    "\2\3\1\0\14\3\1\u0169\7\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\13\3\1\u016a\10\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\12\3\1\u016b\11\3\5\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\7\3\1\u016c\5\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\u016d\23\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\4\3\1\u016e\17\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\21\3\1\u016f\2\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\22\3\1\u016f\1\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\u0170\12\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\7\3\1\u0171\5\3\1\0\2\3\1\0\2\3"+
    "\1\0\6\3\1\u0172\15\3\5\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\u0173\23\3\5\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\5\0\1\u0174\3\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\u0175\20\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\15\3"+
    "\1\u0176\6\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\17\3"+
    "\1\u0177\4\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\2\3\1\u0178\1\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\12\3"+
    "\1\u0175\11\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\u0179\17\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\1\u017a"+
    "\23\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\3\3\1\u017b"+
    "\20\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\12\3\1\u017b"+
    "\11\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\7\3\1\u017c"+
    "\14\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\2\3\1\u017d"+
    "\12\3\1\0\2\3\1\0\2\3\1\0\24\3\5\0"+
    "\1\3\1\u017e\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\16\3\1\u017f"+
    "\5\3\5\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\5\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\7\3\1\u017d"+
    "\5\3\1\0\2\3\1\0\2\3\1\0\24\3\5\0"+
    "\3\3\1\u0180\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\6\3\1\u0181\12\3"+
    "\1\u0182\2\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\u0183\20\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\u0184\12\3\1\0\2\3\1\0\2\3\1\0\12\3"+
    "\1\u0183\11\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\7\3"+
    "\1\u0185\5\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\1\3\1\u0186\2\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\5\3"+
    "\1\u0187\7\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\u0188\20\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\12\3"+
    "\1\u0188\11\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\4\3\7\0\1\3\3\0\1\3\3\0\3\3"+
    "\1\u0189\11\3\1\0\2\3\1\0\2\3\1\0\7\3"+
    "\1\u018a\14\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\6\3"+
    "\1\u018b\15\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\5\0\1\3\1\u018c\2\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\u018d\20\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\u018e\17\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\u018f\20\3\5\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\2\11\1\1\2\11\5\1\5\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\40\1\1\0"+
    "\17\1\5\11\44\1\1\0\67\1\1\11\5\1\1\0"+
    "\1\1\1\0\7\1\1\0\47\1\1\0\1\1\1\0"+
    "\46\1\1\0\1\1\1\0\40\1\1\0\1\1\1\0"+
    "\33\1\1\11\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[399];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 70: break;
        case 29: 
          { return ValorAbsoluto;
          }
        case 71: break;
        case 23: 
          { return RaizCuadrada;
          }
        case 72: break;
        case 25: 
          { return MayorOIgual;
          }
        case 73: break;
        case 65: 
          { return FinRepeticionMientras;
          }
        case 74: break;
        case 52: 
          { return InicioProceso;
          }
        case 75: break;
        case 18: 
          { return Menor;
          }
        case 76: break;
        case 26: 
          { return Asignacion;
          }
        case 77: break;
        case 56: 
          { return ComenzarSubProceso;
          }
        case 78: break;
        case 21: 
          { return Negacion;
          }
        case 79: break;
        case 69: 
          { return ConvertirVariableANumero;
          }
        case 80: break;
        case 58: 
          { return  EntoncesIntrucciones;
          }
        case 81: break;
        case 54: 
          { return InicioRepeticionMientras;
          }
        case 82: break;
        case 49: 
          { return TipoDeDatoEntero;
          }
        case 83: break;
        case 20: 
          { return Conjuncion;
          }
        case 84: break;
        case 22: 
          { return LogaritmoNatural;
          }
        case 85: break;
        case 42: 
          { return InicioPara;
          }
        case 86: break;
        case 36: 
          { return EnteroAleatorio;
          }
        case 87: break;
        case 32: 
          { return FuncionExponencial;
          }
        case 88: break;
        case 33: 
          { return Seno;
          }
        case 89: break;
        case 68: 
          { return ConvertirVariableATexto;
          }
        case 90: break;
        case 46: 
          { return MarcarDesde;
          }
        case 91: break;
        case 62: 
          { return FinProceso;
          }
        case 92: break;
        case 30: 
          { return Tangente;
          }
        case 93: break;
        case 16: 
          { return Modulo;
          }
        case 94: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 95: break;
        case 57: 
          { return MarcarConPaso;
          }
        case 96: break;
        case 64: 
          { return InicioSubProceso;
          }
        case 97: break;
        case 31: 
          { return Coseno;
          }
        case 98: break;
        case 40: 
          { return DefinirComoTipo;
          }
        case 99: break;
        case 59: 
          { return SalidaEscritura;
          }
        case 100: break;
        case 8: 
          { return AbreParentesis;
          }
        case 101: break;
        case 63: 
          { return ConcatenarCadenas;
          }
        case 102: break;
        case 45: 
          { return FinCondicionalSi;
          }
        case 103: break;
        case 24: 
          { return Distinto;
          }
        case 104: break;
        case 27: 
          { return MenorOIgual;
          }
        case 105: break;
        case 66: 
          { return FinAlgoritmo;
          }
        case 106: break;
        case 12: 
          { return Suma;
          }
        case 107: break;
        case 10: 
          { return Comilla;
          }
        case 108: break;
        case 37: 
          { return Arcoseno;
          }
        case 109: break;
        case 53: 
          { return Longitud;
          }
        case 110: break;
        case 55: 
          { return TipoDeDatoCaracter;
          }
        case 111: break;
        case 51: 
          { return DefinirVariable;
          }
        case 112: break;
        case 43: 
          { return EnteroMasCercano;
          }
        case 113: break;
        case 48: 
          { return TipoDeDatoLogico;
          }
        case 114: break;
        case 38: 
          { return EntradaLectura;
          }
        case 115: break;
        case 13: 
          { return Resta;
          }
        case 116: break;
        case 17: 
          { return Mayor;
          }
        case 117: break;
        case 47: 
          { return HacerIntrucciones;
          }
        case 118: break;
        case 5: 
          { return Disyuncion;
          }
        case 119: break;
        case 61: 
          { return DefinirDimension;
          }
        case 120: break;
        case 28: 
          { return InicioCondicionalSi;
          }
        case 121: break;
        case 6: 
          { return PuntoYComa;
          }
        case 122: break;
        case 67: 
          { return  FinSubProceso;
          }
        case 123: break;
        case 1: 
          { return ERROR;
          }
        case 124: break;
        case 7: 
          { return DosPuntos;
          }
        case 125: break;
        case 15: 
          { return Potenciacion;
          }
        case 126: break;
        case 14: 
          { return Multiplicacion;
          }
        case 127: break;
        case 44: 
          { return ParteEntera;
          }
        case 128: break;
        case 4: 
          { /*Ignore*/
          }
        case 129: break;
        case 9: 
          { return CierreParentesis;
          }
        case 130: break;
        case 35: 
          { return Arcocoseno;
          }
        case 131: break;
        case 50: 
          { return FinPara;
          }
        case 132: break;
        case 19: 
          { return Igual;
          }
        case 133: break;
        case 41: 
          { return CondicionalSi;
          }
        case 134: break;
        case 39: 
          { return TipoDeDatoReal;
          }
        case 135: break;
        case 11: 
          { return Division;
          }
        case 136: break;
        case 60: 
          { return InicioAlgoritmo;
          }
        case 137: break;
        case 34: 
          { return Arcotangente;
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
