/* The following code was generated by JFlex 1.4.3 on 10/11/21 11:07 */

package com.fytc.AnalizadorLexico.service_utils;
import static com.fytc.AnalizadorLexico.service_utils.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/11/21 11:07 from the specification file
 * <tt>src/main/java/com/fytc/AnalizadorLexico/service_utils/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\44\2\0\1\3\22\0\1\77\1\0\1\34\2\0"+
    "\1\51\1\57\1\0\1\32\1\33\1\47\1\45\1\3\1\46\1\0"+
    "\1\43\12\2\1\31\1\30\1\54\1\55\1\53\2\0\1\4\1\63"+
    "\1\37\1\52\1\40\1\24\1\6\1\73\1\11\2\1\1\5\1\13"+
    "\1\25\1\7\1\66\1\1\1\10\1\64\1\12\1\67\1\70\1\1"+
    "\1\65\1\56\1\62\1\35\1\0\1\36\1\50\1\1\1\0\1\23"+
    "\1\72\1\41\1\76\1\42\1\27\1\15\1\74\1\20\2\1\1\14"+
    "\1\22\1\26\1\16\1\75\1\1\1\17\1\71\1\21\1\100\4\1"+
    "\1\101\1\0\1\60\u1f9f\0\1\34\u021f\0\1\61\uddc3\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\1\5\12\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\4\2"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\2\1\23"+
    "\1\24\1\25\2\26\1\1\1\27\20\2\1\30\3\2"+
    "\1\31\11\2\1\27\1\2\1\0\12\2\1\4\4\2"+
    "\1\32\1\33\1\34\1\35\1\5\2\36\17\2\1\37"+
    "\12\2\1\40\1\2\1\22\5\2\1\0\3\2\1\41"+
    "\6\2\1\42\12\2\1\43\12\2\1\44\1\2\1\45"+
    "\1\46\1\47\3\2\1\50\1\51\15\2\1\3\1\2"+
    "\1\52\3\2\1\0\1\2\1\0\7\2\1\0\6\2"+
    "\1\53\2\2\1\54\11\2\1\55\1\56\4\2\1\57"+
    "\15\2\1\0\1\2\1\0\12\2\1\60\5\2\1\61"+
    "\2\2\1\62\22\2\1\0\1\2\1\0\2\2\1\63"+
    "\23\2\1\64\11\2\1\0\1\2\1\0\7\2\1\65"+
    "\2\2\1\66\2\2\1\67\1\70\10\2\1\71\1\72"+
    "\2\2\1\73\1\74\1\75\4\2\1\76\12\2\1\77"+
    "\5\2\1\100\3\2\1\101\1\2\1\102\1\2\1\103"+
    "\5\2\1\104\4\2\1\105\4\2\1\106\1\2\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\204"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\102\0\102\0\u0462\0\102\0\102\0\102"+
    "\0\102\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\102\0\102"+
    "\0\102\0\102\0\102\0\u05ee\0\u0630\0\u0672\0\102\0\204"+
    "\0\102\0\u06b4\0\102\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe"+
    "\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e"+
    "\0\u0a50\0\u0a92\0\u0ad4\0\204\0\u0b16\0\u0b58\0\u0b9a\0\204"+
    "\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa"+
    "\0\u0dec\0\204\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\102\0\102\0\102\0\102\0\102"+
    "\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e"+
    "\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e"+
    "\0\u16b0\0\204\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c"+
    "\0\u187e\0\u18c0\0\u1902\0\u1944\0\204\0\u1986\0\204\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\204\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\204"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u1ff8\0\204\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142"+
    "\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\204\0\u22ce\0\204"+
    "\0\204\0\204\0\u2310\0\u2352\0\u2394\0\204\0\204\0\u23d6"+
    "\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6"+
    "\0\u2628\0\u266a\0\u26ac\0\u26ee\0\102\0\u2730\0\204\0\u2772"+
    "\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982"+
    "\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92"+
    "\0\u2bd4\0\u2c16\0\u2c58\0\204\0\u2c9a\0\u2cdc\0\204\0\u2d1e"+
    "\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e"+
    "\0\204\0\204\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\204\0\u3078"+
    "\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288"+
    "\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498"+
    "\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8"+
    "\0\u36ea\0\204\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\204"+
    "\0\u3876\0\u38b8\0\204\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02"+
    "\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12"+
    "\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22"+
    "\0\u3e64\0\u3ea6\0\204\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u3ff0"+
    "\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c\0\u41be\0\u4200"+
    "\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u438c\0\204\0\u43ce"+
    "\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518\0\u455a\0\u459c\0\u45de"+
    "\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a\0\u47ac\0\u47ee"+
    "\0\u4830\0\u4872\0\204\0\u48b4\0\u48f6\0\204\0\u4938\0\u497a"+
    "\0\204\0\204\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06"+
    "\0\u4b48\0\u4b8a\0\204\0\204\0\u4bcc\0\u4c0e\0\102\0\204"+
    "\0\204\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\204\0\u4d58\0\u4d9a"+
    "\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26\0\u4f68\0\u4faa"+
    "\0\204\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\204\0\u5136"+
    "\0\u5178\0\u51ba\0\204\0\u51fc\0\204\0\u523e\0\204\0\u5280"+
    "\0\u52c2\0\u5304\0\u5346\0\u5388\0\204\0\u53ca\0\u540c\0\u544e"+
    "\0\u5490\0\204\0\u54d2\0\u5514\0\u5556\0\u5598\0\204\0\u55da"+
    "\0\204";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\3\1\12\1\13\1\14\2\3\1\15\2\3"+
    "\1\16\1\17\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\5\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\2\3\1\54\1\3\1\55\2\3\1\56\1\3\1\57"+
    "\1\60\1\61\1\62\1\5\2\3\103\0\2\3\1\0"+
    "\24\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\2\0\1\4\102\0\1\5\40\0"+
    "\1\5\32\0\1\5\3\0\2\3\1\0\1\3\1\63"+
    "\4\3\1\64\1\3\1\65\13\3\7\0\1\66\3\3"+
    "\7\0\1\3\3\0\1\3\3\0\1\67\1\70\1\71"+
    "\12\3\1\0\2\3\1\0\2\3\1\0\3\3\1\72"+
    "\6\3\1\73\6\3\1\74\2\3\7\0\1\3\1\75"+
    "\1\3\1\76\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\77\23\3\7\0"+
    "\1\100\1\101\1\3\1\102\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\1\103"+
    "\3\3\1\104\17\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\3\3\1\105\1\3\1\106\6\3\1\107\7\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\12\3\1\73\11\3\7\0"+
    "\3\3\1\76\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\7\0\3\3"+
    "\1\102\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\14\3\1\107\7\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\10\3\1\65\13\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\5\3\1\110\6\3\1\111"+
    "\7\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\3\3\1\112"+
    "\20\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\14\3\1\113"+
    "\7\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\46\0\1\114\34\0\2\3\1\0"+
    "\1\115\2\3\1\116\6\3\1\117\4\3\1\120\4\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\21\3\1\121\1\122"+
    "\1\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\123\1\124\3\3\1\125\5\3\1\0\2\3"+
    "\1\0\2\3\1\0\12\3\1\126\4\3\1\120\4\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\22\3\1\122\1\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\7\3"+
    "\1\125\5\3\1\0\2\3\43\0\1\127\37\0\2\3"+
    "\1\0\5\3\1\130\6\3\1\131\7\3\7\0\1\3"+
    "\1\132\1\3\1\133\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\54\0\1\134\1\135\72\0\1\136"+
    "\6\0\1\137\104\0\1\140\22\0\2\3\1\0\5\3"+
    "\1\141\6\3\1\142\7\3\7\0\1\3\1\143\2\3"+
    "\7\0\1\3\3\0\1\3\3\0\5\3\1\144\7\3"+
    "\1\0\1\145\1\3\1\0\2\3\1\0\1\146\3\3"+
    "\1\147\6\3\1\150\3\3\1\151\4\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\14\3\1\142\7\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\1\152"+
    "\1\3\1\0\2\3\1\0\1\153\16\3\1\154\4\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\17\3\1\154\4\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\13\3\1\150\3\3"+
    "\1\151\4\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\14\3"+
    "\1\131\7\3\7\0\3\3\1\133\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\2\3\1\155\21\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\156\23\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\11\3"+
    "\1\157\12\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\160\20\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\1\161"+
    "\23\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\2\3\1\162"+
    "\12\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\1\3\1\163\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\2\3\1\164"+
    "\16\3\1\165\2\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\11\3\1\166\12\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\7\0\1\3\1\167\2\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\7\0\3\3\1\170\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\5\3"+
    "\1\171\16\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\1\172"+
    "\23\3\7\0\4\3\7\0\1\173\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\17\3\1\174"+
    "\4\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\21\3\1\175"+
    "\2\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\5\3\1\176"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\4\3\7\0\1\177\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\1\3\1\200"+
    "\2\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\3\3\1\201"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\21\3\1\202\2\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\22\3\1\203\1\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\22\3\1\204\1\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\2\0\1\205\100\0\2\3\1\0\4\3\1\206\17\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\7\3\1\207\11\3"+
    "\1\210\2\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\211\12\3\1\0\2\3\1\0\2\3"+
    "\1\0\16\3\1\212\3\3\1\213\1\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\13\3\1\214\10\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\6\3\1\215\15\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\15\3\1\216\6\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\7\0\1\217\3\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\4\3\1\220\10\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\2\3\1\221\1\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\16\3\1\212\3\3\1\222\1\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\44\127\1\0\35\127\1\0\2\3\1\0\7\3"+
    "\1\223\14\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\16\3"+
    "\1\224\5\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\20\3"+
    "\1\225\3\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\226\12\3\1\0\2\3\1\0\2\3"+
    "\1\0\23\3\1\227\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\7\3\1\230\5\3\1\0\2\3\1\0"+
    "\2\3\1\0\21\3\1\231\2\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\22\3\1\232\1\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\21\3\1\233\2\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\1\3\1\234\13\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\10\3\1\235\4\3\1\0\2\3\1\0"+
    "\2\3\1\0\4\3\1\236\17\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\3\3\1\237\20\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\12\3\1\240\11\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\13\3\1\241\10\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\10\3\1\242\4\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\1\243\3\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\2\3\1\244\1\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\245\20\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\21\3\1\246\2\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\247\11\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\250\12\3\1\0\2\3\1\0\2\3"+
    "\1\0\4\3\1\251\17\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\21\3\1\252\2\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\5\3\1\253\16\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\2\3\1\254\21\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\14\3\1\255\7\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\4\3\1\256\17\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\13\3\1\256\10\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\1\100\14\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\1\257\22\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\3\3\1\260\20\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\10\3\1\257\13\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\21\3\1\261\2\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\21\3\1\262\2\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\22\3\1\263\1\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\264\6\3\1\265\14\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\2\3\1\266\1\3\1\267\10\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\270\6\3\1\271"+
    "\14\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\272\1\3\1\273\10\3\1\0\2\3\1\0"+
    "\2\3\1\0\16\3\1\271\1\270\4\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\7\3\1\274\3\3"+
    "\1\273\1\3\1\0\2\3\2\0\1\205\30\0\1\275"+
    "\47\0\2\3\1\0\1\276\23\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\3\3\1\277\20\3\7\0\1\3\1\300"+
    "\2\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\1\301\3\3"+
    "\7\0\1\3\3\0\1\3\3\0\6\3\1\302\6\3"+
    "\1\303\2\3\1\0\2\3\1\0\12\3\1\277\11\3"+
    "\7\0\3\3\1\304\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\305"+
    "\2\3\1\0\2\3\1\0\17\3\1\306\4\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\307\20\3\7\0"+
    "\1\3\1\310\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\12\3\1\311"+
    "\11\3\7\0\3\3\1\312\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\313\17\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\13\3"+
    "\1\314\10\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\315\2\3\1\0\2\3\1\0\24\3\7\0\1\3"+
    "\1\316\2\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\7\0\3\3"+
    "\1\317\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\5\3\1\320\16\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\4\3\7\0"+
    "\1\321\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\14\3\1\322\7\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\14\3\1\323\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\324\20\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\324\11\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\4\3\1\325\10\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\4\3\1\326\10\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\327\23\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\7\0\1\330\3\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\2\3\1\331\1\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\17\3"+
    "\1\327\4\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\13\3"+
    "\1\326\1\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\1\3\1\332\2\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\3\3\1\333\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\4\3\1\334"+
    "\17\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\13\3\1\335"+
    "\10\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\1\336\3\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\5\3\1\337\16\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\7\0\2\3"+
    "\1\340\1\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\21\3\1\341\2\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\7\0\1\342"+
    "\3\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\6\3\1\343\15\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\15\3\1\344\6\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\3\1\345\22\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\5\3\1\346\16\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\5\3\1\347\16\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\5\3\1\350"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\1\351\3\3"+
    "\1\352\17\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\10\3"+
    "\1\353\13\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\14\3"+
    "\1\354\7\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\14\3"+
    "\1\347\7\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\1\355\1\3\1\0\2\3\1\0"+
    "\13\3\1\356\3\3\1\357\4\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\14\3\1\347\7\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\1\360\1\3"+
    "\1\0\2\3\1\0\24\3\7\0\1\361\3\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\21\3\1\362\2\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\363\23\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\1\3\1\364\2\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\66\0\1\365"+
    "\14\0\2\3\1\0\22\3\1\366\1\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\66\0\1\367\6\0\1\367\5\0\2\3\1\0\24\3"+
    "\7\0\2\3\1\370\1\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\21\3"+
    "\1\371\2\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\372\17\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\22\3"+
    "\1\373\1\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\13\3"+
    "\1\374\10\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\5\3"+
    "\1\375\16\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\14\3"+
    "\1\376\7\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\75\0\1\367\5\0\2\3"+
    "\1\0\21\3\1\377\2\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\22\3\1\u0100\1\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\21\3\1\u0101\2\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\1\3\1\u0102\2\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\22\3\1\u0103\1\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\3\3\1\u0102\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\4\3\1\u0104\17\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\13\3\1\u0105\10\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\7\0\1\3\1\u0106\2\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\7\0\3\3\1\u0107\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\u0108\17\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\13\3"+
    "\1\u0108\10\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\5\3"+
    "\1\u0109\16\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\14\3"+
    "\1\u010a\7\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\u010b\20\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\6\3"+
    "\1\u010c\15\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\12\3"+
    "\1\u010b\11\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\u010d\17\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\13\3"+
    "\1\u010e\10\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\2\3"+
    "\1\u010f\21\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\1\3\1\u0110\2\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\1\3"+
    "\1\u0111\13\3\1\0\2\3\1\0\2\3\1\0\4\3"+
    "\1\u0112\17\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\u0113\20\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\11\3"+
    "\1\u0114\12\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\3\3\1\u0115\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\10\3\1\u0116"+
    "\4\3\1\0\2\3\1\0\2\3\1\0\12\3\1\u0117"+
    "\11\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\13\3\1\u0118"+
    "\10\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\10\3\1\u0119"+
    "\4\3\1\0\2\3\1\0\2\3\1\0\6\3\1\u011a"+
    "\15\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\1\u011b\14\3"+
    "\1\0\2\3\1\0\2\3\1\0\6\3\1\u011c\15\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\4\3\1\u011d\17\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\4\0\1\u011e\76\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\1\3\1\u011f\23\0\1\u0120\57\0\2\3\1\0"+
    "\15\3\1\u0121\6\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\7\0\1\u0122\3\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\u0123\20\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\2\3\1\u0124\1\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\12\3"+
    "\1\u0123\11\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\1\3"+
    "\1\u0125\13\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\10\3"+
    "\1\u0126\4\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\u0127\12\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\7\3"+
    "\1\u0128\5\3\1\0\2\3\1\0\2\3\1\0\5\3"+
    "\1\u0129\16\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\14\3"+
    "\1\u012a\7\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\3\3"+
    "\1\u012b\20\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\12\3"+
    "\1\u012c\11\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\u012d\12\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\7\3"+
    "\1\u012e\5\3\1\0\2\3\1\0\2\3\1\0\6\3"+
    "\1\u012f\15\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\15\3"+
    "\1\u0130\6\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\24\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\5\3"+
    "\1\u0131\7\3\1\0\2\3\1\0\2\3\1\0\1\u0132"+
    "\23\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\17\3\1\u0133"+
    "\4\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\3\3\1\u0134"+
    "\20\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\21\3\1\u0135"+
    "\2\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\4\3\1\u0136"+
    "\10\3\1\0\2\3\1\0\2\3\1\0\1\u0137\23\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\7\0\1\u0138"+
    "\3\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\12\3\1\u0139\11\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\22\3\1\u013a\1\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\4\3\1\u013b\10\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\2\3\1\u013c"+
    "\1\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\17\3\1\u0137\4\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\13\3\1\u013b\1\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\1\3\1\u013d"+
    "\2\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\u013e\23\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\7\0\1\3\1\u013f\2\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\6\3\1\u0140\15\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\64\0\1\u0141\16\0\2\3\1\0\17\3\1\u0142\4\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\71\0\1\u0143\11\0\2\3\1\0\24\3"+
    "\7\0\3\3\1\u0144\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\1\3\1\u0145\2\3\7\0\1\3\3\0\1\3\3\0"+
    "\15\3\1\0\2\3\1\0\2\3\1\0\24\3\7\0"+
    "\3\3\1\u0146\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\5\3\1\u0147\16\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\14\3\1\u0148\7\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\5\3\1\u0149\16\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\14\3\1\u014a\7\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\4\3\1\u014b\17\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\13\3\1\u014b\10\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\7\0\1\u014c"+
    "\3\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\2\3\1\u014d"+
    "\1\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\u014e\20\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\12\3\1\u014e\11\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\7\3\1\u014f\14\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\16\3\1\u0150\5\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\4\3\7\0"+
    "\1\u0151\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\2\3\1\u0152\12\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\7\3\1\u0152\5\3\1\0\2\3\1\0"+
    "\2\3\1\0\4\3\1\u0153\17\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\6\3\1\u0154\15\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\4\3\1\u0155\17\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\1\3\1\u0156\2\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\13\3\1\u0157\10\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\15\3\1\u0158\6\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\13\3\1\u0159\10\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\3\3\1\u015a\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\4\3\1\u015b\17\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\4\3\1\u015c\17\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\21\3\1\u015d\2\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\5\3\1\u015e\16\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\7\0\1\u015f"+
    "\73\0\2\3\1\0\13\3\1\u015c\10\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\16\0\1\u015f\64\0\2\3\1\0\13\3\1\u015b\10\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\2\3\1\u0160\12\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\7\3\1\u0160\5\3"+
    "\1\0\2\3\1\0\2\3\1\0\4\3\1\u0161\17\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\13\3\1\u0161\10\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\3\3\1\u0162\20\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\12\3\1\u0163\11\3"+
    "\7\0\4\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\7\0\1\3"+
    "\1\u0164\2\3\7\0\1\3\3\0\1\3\3\0\15\3"+
    "\1\0\2\3\1\0\2\3\1\0\24\3\7\0\3\3"+
    "\1\u0165\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\u0166\20\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\12\3\1\u0166\11\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\5\3\1\u0167\16\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\4\3\1\u0168\17\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\3\3\1\u0169\20\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\u016a\12\3\1\0"+
    "\2\3\1\0\2\3\1\0\14\3\1\u016b\7\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\13\3\1\u016c\10\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\12\3\1\u016d\11\3\7\0"+
    "\4\3\7\0\1\3\3\0\1\3\3\0\15\3\1\0"+
    "\2\3\1\0\2\3\1\0\24\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\7\3\1\u016e\5\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\u016f\23\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\4\3\1\u0170\17\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\21\3\1\u0171\2\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\22\3\1\u0171\1\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\2\3\1\u0172\12\3\1\0\2\3"+
    "\1\0\2\3\1\0\24\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\7\3\1\u0173\5\3\1\0\2\3"+
    "\1\0\2\3\1\0\6\3\1\u0174\15\3\7\0\4\3"+
    "\7\0\1\3\3\0\1\3\3\0\15\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\u0175\23\3\7\0\4\3\7\0"+
    "\1\3\3\0\1\3\3\0\15\3\1\0\2\3\1\0"+
    "\2\3\1\0\24\3\7\0\1\u0176\3\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\u0177\20\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\15\3\1\u0178\6\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\17\3\1\u0179\4\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\2\3\1\u017a\1\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\u0177\11\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\4\3\1\u017b\17\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\u017c\23\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\3\3\1\u017d\20\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\12\3\1\u017d\11\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\7\3\1\u017e\14\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\u017f\12\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\7\0\1\3\1\u0180\2\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\16\3\1\u0181\5\3\7\0\4\3\7\0\1\3\3\0"+
    "\1\3\3\0\15\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\7\0\4\3\7\0\1\3\3\0\1\3\3\0"+
    "\7\3\1\u017f\5\3\1\0\2\3\1\0\2\3\1\0"+
    "\24\3\7\0\3\3\1\u0182\7\0\1\3\3\0\1\3"+
    "\3\0\15\3\1\0\2\3\1\0\2\3\1\0\6\3"+
    "\1\u0183\12\3\1\u0184\2\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\u0185\20\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\u0186\12\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\u0185\11\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\7\3\1\u0187\5\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\1\3\1\u0188\2\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\5\3\1\u0189\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\u018a\20\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\12\3\1\u018a\11\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\4\3\7\0\1\3\3\0\1\3"+
    "\3\0\3\3\1\u018b\11\3\1\0\2\3\1\0\2\3"+
    "\1\0\7\3\1\u018c\14\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\6\3\1\u018d\15\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\24\3\7\0\1\3\1\u018e\2\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\u018f\20\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\4\3\1\u0190\17\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\u0191\20\3\7\0\4\3\7\0\1\3"+
    "\3\0\1\3\3\0\15\3\1\0\2\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22044];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\20\1\2\11\1\1\4\11\5\1\5\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\40\1\1\0"+
    "\17\1\5\11\44\1\1\0\67\1\1\11\5\1\1\0"+
    "\1\1\1\0\7\1\1\0\47\1\1\0\1\1\1\0"+
    "\46\1\1\0\1\1\1\0\40\1\1\0\1\1\1\0"+
    "\33\1\1\11\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 72: break;
        case 31: 
          { return ValorAbsoluto;
          }
        case 73: break;
        case 25: 
          { return RaizCuadrada;
          }
        case 74: break;
        case 27: 
          { return MayorOIgual;
          }
        case 75: break;
        case 67: 
          { return FinRepeticionMientras;
          }
        case 76: break;
        case 54: 
          { return InicioProceso;
          }
        case 77: break;
        case 20: 
          { return Menor;
          }
        case 78: break;
        case 28: 
          { return Asignacion;
          }
        case 79: break;
        case 58: 
          { return ComenzarSubProceso;
          }
        case 80: break;
        case 23: 
          { return Negacion;
          }
        case 81: break;
        case 71: 
          { return ConvertirVariableANumero;
          }
        case 82: break;
        case 60: 
          { return  EntoncesIntrucciones;
          }
        case 83: break;
        case 56: 
          { return InicioRepeticionMientras;
          }
        case 84: break;
        case 51: 
          { return TipoDeDatoEntero;
          }
        case 85: break;
        case 22: 
          { return Conjuncion;
          }
        case 86: break;
        case 24: 
          { return LogaritmoNatural;
          }
        case 87: break;
        case 44: 
          { return InicioPara;
          }
        case 88: break;
        case 38: 
          { return EnteroAleatorio;
          }
        case 89: break;
        case 34: 
          { return FuncionExponencial;
          }
        case 90: break;
        case 11: 
          { return AbreArreglo;
          }
        case 91: break;
        case 35: 
          { return Seno;
          }
        case 92: break;
        case 70: 
          { return ConvertirVariableATexto;
          }
        case 93: break;
        case 48: 
          { return MarcarDesde;
          }
        case 94: break;
        case 64: 
          { return FinProceso;
          }
        case 95: break;
        case 32: 
          { return Tangente;
          }
        case 96: break;
        case 18: 
          { return Modulo;
          }
        case 97: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 98: break;
        case 59: 
          { return MarcarConPaso;
          }
        case 99: break;
        case 66: 
          { return InicioSubProceso;
          }
        case 100: break;
        case 33: 
          { return Coseno;
          }
        case 101: break;
        case 42: 
          { return DefinirComoTipo;
          }
        case 102: break;
        case 61: 
          { return SalidaEscritura;
          }
        case 103: break;
        case 8: 
          { return AbreParentesis;
          }
        case 104: break;
        case 65: 
          { return ConcatenarCadenas;
          }
        case 105: break;
        case 47: 
          { return FinCondicionalSi;
          }
        case 106: break;
        case 26: 
          { return Distinto;
          }
        case 107: break;
        case 29: 
          { return MenorOIgual;
          }
        case 108: break;
        case 68: 
          { return FinAlgoritmo;
          }
        case 109: break;
        case 14: 
          { return Suma;
          }
        case 110: break;
        case 10: 
          { return Comilla;
          }
        case 111: break;
        case 39: 
          { return Arcoseno;
          }
        case 112: break;
        case 55: 
          { return Longitud;
          }
        case 113: break;
        case 57: 
          { return TipoDeDatoCaracter;
          }
        case 114: break;
        case 53: 
          { return DefinirVariable;
          }
        case 115: break;
        case 45: 
          { return EnteroMasCercano;
          }
        case 116: break;
        case 50: 
          { return TipoDeDatoLogico;
          }
        case 117: break;
        case 40: 
          { return EntradaLectura;
          }
        case 118: break;
        case 12: 
          { return CierreArreglo;
          }
        case 119: break;
        case 15: 
          { return Resta;
          }
        case 120: break;
        case 19: 
          { return Mayor;
          }
        case 121: break;
        case 49: 
          { return HacerIntrucciones;
          }
        case 122: break;
        case 5: 
          { return Disyuncion;
          }
        case 123: break;
        case 63: 
          { return DefinirDimension;
          }
        case 124: break;
        case 30: 
          { return InicioCondicionalSi;
          }
        case 125: break;
        case 6: 
          { return PuntoYComa;
          }
        case 126: break;
        case 69: 
          { return  FinSubProceso;
          }
        case 127: break;
        case 1: 
          { return ERROR;
          }
        case 128: break;
        case 7: 
          { return DosPuntos;
          }
        case 129: break;
        case 17: 
          { return Potenciacion;
          }
        case 130: break;
        case 16: 
          { return Multiplicacion;
          }
        case 131: break;
        case 46: 
          { return ParteEntera;
          }
        case 132: break;
        case 4: 
          { /*Ignore*/
          }
        case 133: break;
        case 9: 
          { return CierreParentesis;
          }
        case 134: break;
        case 37: 
          { return Arcocoseno;
          }
        case 135: break;
        case 52: 
          { return FinPara;
          }
        case 136: break;
        case 21: 
          { return Igual;
          }
        case 137: break;
        case 43: 
          { return CondicionalSi;
          }
        case 138: break;
        case 41: 
          { return TipoDeDatoReal;
          }
        case 139: break;
        case 13: 
          { return Division;
          }
        case 140: break;
        case 62: 
          { return InicioAlgoritmo;
          }
        case 141: break;
        case 36: 
          { return Arcotangente;
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
